!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<F5>	vimconfig/.vim/plugin/lookupfile.vim	/^      imap <unique> <expr> <silent> <F5> (pumvisible() ? "\\<Plug>LookupFileCE" :$/;"	m
<F5>	vimconfig/.vim/plugin/lookupfile.vim	/^      nmap <unique> <silent> <F5> <Plug>LookupFile$/;"	m
<F7>	vimconfig/.vim/macros/gdb_mappings.vim	/^nmap <F7> :call <SID>Toggle()<CR>$/;"	m
<Leader>be	vimconfig/.vim/plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>be :BufExplorer<CR>$/;"	m
<Leader>bs	vimconfig/.vim/plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>$/;"	m
<Leader>bv	vimconfig/.vim/plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>$/;"	m
<Plug>LookupFile	vimconfig/.vim/plugin/lookupfile.vim	/^  noremap <script> <silent> <Plug>LookupFile :LookupFile<CR>$/;"	m
<Plug>LookupFileCE	vimconfig/.vim/plugin/lookupfile.vim	/^      inoremap <Plug>LookupFileCE <C-E>$/;"	m
<Plug>SuperTabBackward	vimconfig/.vim/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	vimconfig/.vim/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<Plug>ZoomWin	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^nnoremap <silent> <script> <Plug>ZoomWin :set lz<CR>:silent call ZoomWin#ZoomWin()<CR>:set nolz<CR>$/;"	m
<SID>xx	vimconfig/.vim/plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-n>	vimconfig/.vim/plugin/supertab.vim	/^    imap <c-n> <Plug>SuperTabForward$/;"	m
<c-p>	vimconfig/.vim/plugin/supertab.vim	/^    imap <c-p> <Plug>SuperTabBackward$/;"	m
<c-r><tab>	vimconfig/.vim/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-w>o	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^ nmap <unique> <c-w>o  <Plug>ZoomWin$/;"	m
<c-x>	vimconfig/.vim/plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	vimconfig/.vim/plugin/supertab.vim	/^      inoremap <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<leader>ca	vimconfig/.vim/plugin/NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<plug>NERDCommenterAlignBoth	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	vimconfig/.vim/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	vimconfig/.vim/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	vimconfig/.vim/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	vimconfig/.vim/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	vimconfig/.vim/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	vimconfig/.vim/plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	vimconfig/.vim/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	vimconfig/.vim/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
ADVERTISE_FC_SUPPORTED	e100.c	1435;"	d	file:
ALIGN_N_BYTE	m6x_drv/src/app.c	26;"	d	file:
ALIGN_N_BYTE	m6x_drv/src/m6x_api.h	63;"	d
ALIGN_N_BYTE	pcie_net_dri.h	91;"	d
ALIGN_N_BYTE	test_dma/m6x_api.h	63;"	d
ARG_ADDR	m6x_drv/src/ioctl.c	/^	ARG_ADDR,$/;"	e	enum:__anon24	file:
ARG_EN	m6x_drv/src/ioctl.c	/^	ARG_EN,$/;"	e	enum:__anon24	file:
ARG_INDEX	m6x_drv/src/ioctl.c	/^} ARG_INDEX;$/;"	t	typeref:enum:__anon24	file:
ARG_SIZE	m6x_drv/src/ioctl.c	/^	ARG_SIZE,$/;"	e	enum:__anon24	file:
ARG_VALUE	m6x_drv/src/ioctl.c	/^	ARG_VALUE,$/;"	e	enum:__anon24	file:
AcceptFile	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:AcceptFile(splitWin, key)$/;"	f
AcpDisable	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AcpDisable call acp#disable()$/;"	c
AcpEnable	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AcpEnable  call acp#enable()$/;"	c
AcpLock	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AcpLock    call acp#lock()$/;"	c
AcpUnlock	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AcpUnlock  call acp#unlock()$/;"	c
AddCleanup	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:AddCleanup(cmd)$/;"	f
AddLeftDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddPattern	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:AddPattern()$/;"	f
AddRightDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AltMultipart	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AppendCommentToLine	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
AutoComplPopDisable	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopDisable AcpDisable$/;"	c
AutoComplPopEnable	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopEnable  AcpEnable$/;"	c
AutoComplPopLock	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopLock    AcpLock$/;"	c
AutoComplPopUnlock	vimconfig/.vim/plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopUnlock  AcpUnlock$/;"	c
BEActivateBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEActivateBuffer()$/;"	f
BEAddBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEAddBuffer()$/;"	f
BEBuildBufferList	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEBuildBufferList()$/;"	f
BECleanup	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BECleanup()$/;"	f
BEClose	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEClose(mode)$/;"	f
BECreateHelp	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BECreateHelp()$/;"	f
BEDeactivateBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEDeactivateBuffer(remove)$/;"	f
BEDeleteBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEDeleteBuffer(bufNbr, mode)$/;"	f
BEDeleteBufferListing	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEDeleteBufferListing(buf)$/;"	f
BEDisplayBufferList	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEDisplayBufferList()$/;"	f
BEError	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEError(msg)$/;"	f
BEGetBufferInfo	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEGetBufferInfo(bufnr)$/;"	f
BEGetHelpStatus	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEGetHelpStatus()$/;"	f
BEGetTabNbr	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEGetTabNbr(bufNbr)$/;"	f
BEGetWinNbr	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEGetWinNbr(tabNbr, bufNbr)$/;"	f
BEIgnoreBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEIgnoreBuffer(buf)$/;"	f
BEInitialize	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEInitialize()$/;"	f
BEMRUCmp	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEMRUCmp(line1, line2)$/;"	f
BEMRUListShow	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEMRUListShow()$/;"	f
BEMRUPop	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEMRUPop(buf)$/;"	f
BEMRUPush	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEMRUPush(buf)$/;"	f
BEMapKeys	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEMapKeys()$/;"	f
BEReSortListing	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEReSortListing()$/;"	f
BERebuildBufferList	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BERebuildBufferList(...)$/;"	f
BERemoveBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BERemoveBuffer(type, mode) range$/;"	f
BEReset	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEReset()$/;"	f
BEReverseSortSelect	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEReverseSortSelect()$/;"	f
BESelectBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESelectBuffer(...)$/;"	f
BESet	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESet(var, default)$/;"	f
BESetup	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESetup()$/;"	f
BESetupSyntax	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESetupSyntax()$/;"	f
BESortListing	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESortListing()$/;"	f
BESortReverse	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESortReverse()$/;"	f
BESortSelect	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BESortSelect()$/;"	f
BETabEnter	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BETabEnter()$/;"	f
BEToggleFindActive	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleFindActive()$/;"	f
BEToggleHelp	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleHelp()$/;"	f
BEToggleOnlyOneTab	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleOnlyOneTab()$/;"	f
BEToggleShowRelativePath	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleShowRelativePath()$/;"	f
BEToggleShowTabBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleShowTabBuffer()$/;"	f
BEToggleShowUnlisted	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleShowUnlisted()$/;"	f
BEToggleSplitOutPathName	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEToggleSplitOutPathName()$/;"	f
BEUpdateHelpStatus	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEUpdateHelpStatus()$/;"	f
BEWarning	vimconfig/.vim/plugin/bufexplorer.vim	/^function! s:BEWarning(msg)$/;"	f
BIT_CLR	m6x_drv/src/m6x_api.h	62;"	d
BIT_CLR	pcie_net_dri.h	90;"	d
BIT_CLR	test_dma/m6x_api.h	62;"	d
BIT_SET	m6x_drv/src/m6x_api.h	61;"	d
BIT_SET	pcie_net_dri.h	89;"	d
BIT_SET	test_dma/m6x_api.h	61;"	d
BUNDLEMAX	e100.c	1242;"	d	file:
BUNDLESMALL	e100.c	1241;"	d	file:
BackwardsSnippet	vimconfig/.vim/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
BalloonDeclaration	vimconfig/.vim/plugin/echofunc.vim	/^function! BalloonDeclaration()$/;"	f
BalloonDeclarationStart	vimconfig/.vim/plugin/echofunc.vim	/^function! BalloonDeclarationStart()$/;"	f
BalloonDeclarationStop	vimconfig/.vim/plugin/echofunc.vim	/^function! BalloonDeclarationStop()$/;"	f
BinSearchToAppend	vimconfig/.vim/autoload/genutils.vim	/^function! s:BinSearchToAppend(start, end, line, cmp, direction)$/;"	f
BinSearchToAppend2	vimconfig/.vim/autoload/genutils.vim	/^function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor,$/;"	f
Bookmark.AddBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Breakpoint	vimconfig/.vim/macros/gdb_mappings.vim	/^function! s:Breakpoint(cmd)$/;"	f
BufExplorer	vimconfig/.vim/plugin/bufexplorer.vim	/^command! BufExplorer :call StartBufExplorer(has ("gui") ? "drop" : "hide edit")$/;"	c
BufExplorerHorizontalSplit	vimconfig/.vim/plugin/bufexplorer.vim	/^command! BufExplorerHorizontalSplit :call BufExplorerHorizontalSplit()$/;"	c
BufExplorerHorizontalSplit	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorerHorizontalSplit()$/;"	f
BufExplorerVerticalSplit	vimconfig/.vim/plugin/bufexplorer.vim	/^command! BufExplorerVerticalSplit :call BufExplorerVerticalSplit()$/;"	c
BufExplorerVerticalSplit	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorerVerticalSplit()$/;"	f
BufExplorerVimEnter	vimconfig/.vim/plugin/bufexplorer.vim	/^augroup BufExplorerVimEnter$/;"	a
BufExplorer_IsValid	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorer_IsValid()$/;"	f
BufExplorer_ReSize	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorer_ReSize()$/;"	f
BufExplorer_Refresh	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorer_Refresh()$/;"	f
BufExplorer_Start	vimconfig/.vim/plugin/bufexplorer.vim	/^function! BufExplorer_Start()$/;"	f
BufLineAccessor	vimconfig/.vim/autoload/genutils.vim	/^function! s:BufLineAccessor(line, context)$/;"	f
BufLineMover	vimconfig/.vim/autoload/genutils.vim	/^function! s:BufLineMover(from, to, context)$/;"	f
BufLineSwapper	vimconfig/.vim/autoload/genutils.vim	/^function! s:BufLineSwapper(line1, line2, context)$/;"	f
BuildContextStack	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:BuildContextStack(namespaces, szCurrentScope)$/;"	f
BuildTabStops	vimconfig/.vim/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CanCommentLine	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CanUseOmnicompletion	vimconfig/.vim/autoload/omni/cpp/maycomplete.vim	/^function! s:CanUseOmnicompletion()$/;"	f
CaptureKeyPresses	vimconfig/.vim/plugin/supertab.vim	/^function! s:CaptureKeyPresses()$/;"	f
Char2Num	vimconfig/.vim/autoload/genutils.vim	/^function! s:Char2Num(c)$/;"	f
CheckTagsLanguage	vimconfig/.vim/plugin/echofunc.vim	/^function! s:CheckTagsLanguage(filetype)$/;"	f
CheckedBalloonDeclarationStart	vimconfig/.vim/plugin/echofunc.vim	/^function! CheckedBalloonDeclarationStart()$/;"	f
CheckedEchoFuncStart	vimconfig/.vim/plugin/echofunc.vim	/^function! CheckedEchoFuncStart()$/;"	f
ChooseSnippet	vimconfig/.vim/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
Close	vimconfig/.vim/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CmpByName	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:CmpByName(i1, i2)$/;"	f
CommandLineCompletion	vimconfig/.vim/plugin/supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommentBlock	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
CompletionReset	vimconfig/.vim/plugin/supertab.vim	/^function! s:CompletionReset(char)$/;"	f
ConfigBufs	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:ConfigBufs()$/;"	f
ConfigWalk	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:ConfigWalk()$/;"	f
ContextCompletion	vimconfig/.vim/plugin/supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	vimconfig/.vim/plugin/supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	vimconfig/.vim/plugin/supertab.vim	/^function! s:ContextText()$/;"	f
ConvertLeadingSpacesToTabs	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	vimconfig/.vim/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountNonESCedOccurances	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateDelimMapFromCms	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateMaps	vimconfig/.vim/plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	vimconfig/.vim/plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
DEBUG	pcie_net_dri.h	299;"	d
DEBUG0	pcie_net_dri.h	338;"	d
DEBUG1	pcie_net_dri.h	339;"	d
DEBUG2	pcie_net_dri.h	340;"	d
DEBUG3	pcie_net_dri.h	341;"	d
DEBUG4	pcie_net_dri.h	342;"	d
DEBUG5	pcie_net_dri.h	343;"	d
DEBUG6	pcie_net_dri.h	344;"	d
DEBUG7	pcie_net_dri.h	345;"	d
DP83840	e100.c	/^	DP83840,$/;"	e	enum:eeprom_phy_iface	file:
DP83840A	e100.c	/^	DP83840A = 10,$/;"	e	enum:eeprom_phy_iface	file:
DRVER_NAME	m6x_drv/src/pcie.c	18;"	d	file:
DRVER_NAME	pcie_net_dri.c	3;"	d	file:
DRVER_NAME	test_dma/dma_test.c	7;"	d	file:
DRV_COPYRIGHT	e100.c	/^MODULE_AUTHOR(DRV_COPYRIGHT);$/;"	v
DRV_COPYRIGHT	e100.c	181;"	d	file:
DRV_DESCRIPTION	e100.c	/^MODULE_DESCRIPTION(DRV_DESCRIPTION);$/;"	v
DRV_DESCRIPTION	e100.c	180;"	d	file:
DRV_EXT	e100.c	178;"	d	file:
DRV_NAME	e100.c	177;"	d	file:
DRV_VERSION	e100.c	/^MODULE_VERSION(DRV_VERSION);$/;"	v
DRV_VERSION	e100.c	179;"	d	file:
DefineSnips	vimconfig/.vim/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DisplayIncludeTree	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^function! s:DisplayIncludeTree(szFilePath, indent, ...)$/;"	f
DoesBlockHaveDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
E100_82552_ANEG_NOW	e100.c	2979;"	d	file:
E100_82552_LED_OFF	e100.c	2398;"	d	file:
E100_82552_LED_ON	e100.c	2397;"	d	file:
E100_82552_LED_OVERRIDE	e100.c	2396;"	d	file:
E100_82552_REV_ANEG	e100.c	2978;"	d	file:
E100_82552_SMARTSPEED	e100.c	2977;"	d	file:
E100_EEPROM_MAGIC	e100.c	2513;"	d	file:
E100_MAX_MULTICAST_ADDRS	e100.c	494;"	d	file:
E100_NAPI_WEIGHT	e100.c	184;"	d	file:
E100_NET_STATS_LEN	e100.c	2666;"	d	file:
E100_PHY_REGS	e100.c	2428;"	d	file:
E100_STATS_LEN	e100.c	2667;"	d	file:
E100_TEST_LEN	e100.c	2583;"	d	file:
E100_WAIT_SCB_FAST	e100.c	840;"	d	file:
E100_WAIT_SCB_TIMEOUT	e100.c	839;"	d	file:
E100_WATCHDOG_PERIOD	e100.c	183;"	d	file:
EchoFunc	vimconfig/.vim/plugin/echofunc.vim	/^augroup EchoFunc$/;"	a
EchoFunc	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFunc()$/;"	f
EchoFuncClear	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFuncClear()$/;"	f
EchoFuncDisplay	vimconfig/.vim/plugin/echofunc.vim	/^function! s:EchoFuncDisplay()$/;"	f
EchoFuncInitialize	vimconfig/.vim/plugin/echofunc.vim	/^function! s:EchoFuncInitialize()$/;"	f
EchoFuncN	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFuncN()$/;"	f
EchoFuncP	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFuncP()$/;"	f
EchoFuncStart	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFuncStart()$/;"	f
EchoFuncStop	vimconfig/.vim/plugin/echofunc.vim	/^function! EchoFuncStop()$/;"	f
EnableLongestEnhancement	vimconfig/.vim/plugin/supertab.vim	/^function! s:EnableLongestEnhancement()$/;"	f
Esc	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
ExecWinCmdNoEa	vimconfig/.vim/autoload/genutils.vim	/^function! s:ExecWinCmdNoEa(winCmd)$/;"	f
ExpandMap	vimconfig/.vim/plugin/supertab.vim	/^function! s:ExpandMap(map)$/;"	f
ExtendTagItemToPopupItem	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:ExtendTagItemToPopupItem(tagItem, szTypeName)$/;"	f
ExtractScopeFromTypeInfo	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! s:ExtractScopeFromTypeInfo(szTypeInfo)$/;"	f
ExtractSnips	vimconfig/.vim/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	vimconfig/.vim/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
ExtractTypeInfoFromDecl	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:ExtractTypeInfoFromDecl(tokens)$/;"	f
FIRMWARE_D101M	e100.c	/^MODULE_FIRMWARE(FIRMWARE_D101M);$/;"	v
FIRMWARE_D101M	e100.c	186;"	d	file:
FIRMWARE_D101S	e100.c	/^MODULE_FIRMWARE(FIRMWARE_D101S);$/;"	v
FIRMWARE_D101S	e100.c	187;"	d	file:
FIRMWARE_D102E	e100.c	/^MODULE_FIRMWARE(FIRMWARE_D102E);$/;"	v
FIRMWARE_D102E	e100.c	188;"	d	file:
FilePatIgnoreCase	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:FilePatIgnoreCase(filePat)$/;"	f
Filename	vimconfig/.vim/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FilterClassMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FilterClassMembers(tagPopupList, szAccessFilter)$/;"	f
FilterClassScopeMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FilterClassScopeMembers(tagPopupList, szAccessFilter)$/;"	f
FilterNamespaceScopeMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FilterNamespaceScopeMembers(tagPopupList)$/;"	f
FilterOverloadedFunctions	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FilterOverloadedFunctions(tagPopupList)$/;"	f
FilterStaticClassMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FilterStaticClassMembers(tagPopupList, szAccessFilter)$/;"	f
FindBoundingLinesOfSexyCom	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindBufferForName	vimconfig/.vim/autoload/genutils.vim	/^function! s:FindBufferForName(fileName)$/;"	f
FindDelimiterIndex	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindStartPositionOfCompletion	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:FindStartPositionOfCompletion()$/;"	f
FormatFileResults	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:FormatFileResults(fl, parentLen, matchPat, matchingCase, dirsOnly)$/;"	f
ForwardBack	vimconfig/.vim/plugin/supertab.vim	/^  function! s:ForwardBack(command, map)$/;"	f
GUDebugEcho	vimconfig/.vim/autoload/genutils.vim	/^command! -complete=file -nargs=* GUDebugEcho :echo <q-args>$/;"	c
GetAccessFilter	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:GetAccessFilter(szFilter, szAccessFilter)$/;"	f
GetAllUsingNamespaceMapFromCurrentBuffer	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromCurrentBuffer(...)$/;"	f
GetAllUsingNamespaceMapFromFile	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromFile(szFilePath, ...)$/;"	f
GetClassScopeAtCursor	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetClassScopeAtCursor()$/;"	f
GetCommand	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:GetCommand(withPopupTrigger, withSkipPat, actCmd, innerCmd)$/;"	f
GetDefDir	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:GetDefDir()$/;"	f
GetFuncName	vimconfig/.vim/plugin/echofunc.vim	/^function! s:GetFuncName(text)$/;"	f
GetFunctions	vimconfig/.vim/plugin/echofunc.vim	/^function! s:GetFunctions(fun, fn_only)$/;"	f
GetIncludeListFromCurrentBuffer	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^function! s:GetIncludeListFromCurrentBuffer()$/;"	f
GetIncludeListFromFile	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^function! s:GetIncludeListFromFile(szFilePath, bUpdate) $/;"	f
GetLatestVimScripts	vimconfig/.vim/autoload/getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	vimconfig/.vim/plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetNamespaceAliasListFromLine	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceAliasListFromLine(szLine)$/;"	f
GetNamespaceAliasMap	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceAliasMap()$/;"	f
GetNamespaceListFromLine	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetNamespaceListFromLine(szLine)$/;"	f
GetNextWinnrInStack	vimconfig/.vim/autoload/genutils.vim	/^function! s:GetNextWinnrInStack(dir)$/;"	f
GetOneScript	vimconfig/.vim/autoload/getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetScript	vimconfig/.vim/autoload/getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScripts	vimconfig/.vim/plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetSexyComLeft	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	vimconfig/.vim/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	vimconfig/.vim/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetStopPositionForLocalSearch	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetStopPositionForLocalSearch()$/;"	f
GetSymbol	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:GetSymbol(tokens)$/;"	f
GetTagOfSameScope	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! s:GetTagOfSameScope(listTags, szScopeToMatch)$/;"	f
GetTypeInfoOfReturnedType	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:GetTypeInfoOfReturnedType(contextStack, szFunctionName)$/;"	f
GetTypeInfoOfVariable	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:GetTypeInfoOfVariable(contextStack, szVariable, bSearchDecl)$/;"	f
GetUsingNamespaceListFromMap	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:GetUsingNamespaceListFromMap(namespaceMap, ...)$/;"	f
GetWinDim	vimconfig/.vim/autoload/genutils.vim	/^function! s:GetWinDim(dir, win)$/;"	f
GotoWinNum	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! s:GotoWinNum(winnum)$/;"	f
HLUDColor	vimconfig/.vim/plugin/hlud.vim	/^function! HLUDColor()$/;"	f
HLUDGetTags	vimconfig/.vim/plugin/hlud.vim	/^function! HLUDGetTags(flag)$/;"	f
HLUDInit	vimconfig/.vim/plugin/hlud.vim	/^function! HLUDInit(TagFilename)$/;"	f
HLUDSync	vimconfig/.vim/plugin/hlud.vim	/^function! HLUDSync()$/;"	f
HasATagFileOrTagEnvChanged	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:HasATagFileOrTagEnvChanged()$/;"	f
HasCStyleComments	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HasTagEnvChanged	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:HasTagEnvChanged()$/;"	f
HidePopup	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:HidePopup()$/;"	f
I82503	e100.c	/^	I82503,$/;"	e	enum:eeprom_phy_iface	file:
I82553AB	e100.c	/^	I82553AB,$/;"	e	enum:eeprom_phy_iface	file:
I82553C	e100.c	/^	I82553C,$/;"	e	enum:eeprom_phy_iface	file:
I82555	e100.c	/^	I82555,$/;"	e	enum:eeprom_phy_iface	file:
INTDELAY	e100.c	1243;"	d	file:
INTEL_8255X_ETHERNET_DEVICE	e100.c	208;"	d	file:
INTRUPT_RECEIVE_COMPLE	pcie_net_dri.h	359;"	d
INTRUPT_RECEIVE_START	pcie_net_dri.h	357;"	d
INTRUPT_SEND_COMPLE	pcie_net_dri.h	358;"	d
IdoAccept	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:IdoAccept(splitWin, key)$/;"	f
IdoBS	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:IdoBS()$/;"	f
IdoSwitchTo	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:IdoSwitchTo(mode)$/;"	f
IdoTab	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:IdoTab()$/;"	f
Init	vimconfig/.vim/plugin/supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	vimconfig/.vim/plugin/supertab.vim	/^function! s:InitBuffer()$/;"	f
InitComplete	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:InitComplete()$/;"	f
InitVariable	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
InvertComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
InvokeFuncs	vimconfig/.vim/autoload/genutils.vim	/^function! s:InvokeFuncs(funcList)$/;"	f
IsCached	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:IsCached(cache, szKey1, szKey2)$/;"	f
IsCommented	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInSexyComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsNumEven	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsTypeInfoResolved	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! s:IsTypeInfoResolved(szTypeInfo)$/;"	f
IsUnnamedType	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:IsUnnamedType(tagItem)$/;"	f
IsValid	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:IsValid(fileName)$/;"	f
KERNELDIR	Makefile	/^KERNELDIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
KERNEL_DIR	m6x_drv/src/Makefile	/^KERNEL_DIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
KERNEL_DIR	test_dma/Makefile	/^KERNEL_DIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
KeyMap.All	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
LUArgs	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=file LUArgs :call$/;"	c
LUBufs	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=file LUBufs :call$/;"	c
LUPath	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=file LUPath :call$/;"	c
LUTags	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=tag LUTags :call$/;"	c
LUWalk	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=dir LUWalk :call$/;"	c
LastIndexOfDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LocalSearchDecl	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:LocalSearchDecl(name)$/;"	f
LookupArgs	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupArgs(pattern)$/;"	f
LookupBufs	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupBufs(pattern)$/;"	f
LookupFile	vimconfig/.vim/plugin/lookupfile.vim	/^command! -nargs=? -bang -complete=file LookupFile :call$/;"	c
LookupFileReset	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:LookupFileReset(force)$/;"	f
LookupFileSet	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:LookupFileSet()$/;"	f
LookupPath	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupPath(pattern)$/;"	f
LookupReset	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupReset()$/;"	f
LookupUsing	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupUsing(ftr, bang, initPat, minPatLen)$/;"	f
LookupWalk	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:LookupWalk(pattern)$/;"	f
M6X_ARG_MAX	m6x_drv/src/ioctl.c	/^	M6X_ARG_MAX$/;"	e	enum:__anon24	file:
M6X_WATCHDOG_PERIOD	pcie_net_dri.h	80;"	d
MII_LED_CONTROL	e100.c	2395;"	d	file:
MII_NSC_CONG	e100.c	1432;"	d	file:
MODULE_NAME	m6x_drv/src/Makefile	/^MODULE_NAME = m6xdrv$/;"	m
MODULE_NAME	test_dma/Makefile	/^MODULE_NAME = dma_pcie$/;"	m
MRU	vimconfig/.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	vimconfig/.vim/plugin/mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	vimconfig/.vim/plugin/mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	vimconfig/.vim/plugin/mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Include_Files	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Max_Menu_Entries	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Open_Window	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Select_File_Cmd	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Use_Current_Window	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Window_Height	vimconfig/.vim/plugin/mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_add_files_to_menu	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	vimconfig/.vim/plugin/mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MakeSnip	vimconfig/.vim/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
ManualCompletionEnter	vimconfig/.vim/plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
Match	vimconfig/.vim/autoload/genutils.vim	/^function! s:Match(expr, pat, start)$/;"	f
MatchingExactCase	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:MatchingExactCase(filePat)$/;"	f
MenuController.New	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Mru	vimconfig/.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
Multipart	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
NCONFIG_AUTO_SWITCH	e100.c	1431;"	d	file:
NCS_PHY_MODEL_MASK	e100.c	1495;"	d	file:
NERDComment	vimconfig/.vim/plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDTree	vimconfig/.vim/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	vimconfig/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vimconfig/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vimconfig/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	vimconfig/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vimconfig/.vim/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vimconfig/.vim/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	vimconfig/.vim/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	vimconfig/.vim/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	vimconfig/.vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NSC_CONG_ENABLE	e100.c	1433;"	d	file:
NSC_CONG_TXREADY	e100.c	1434;"	d	file:
NerdEcho	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NoSuchPhy	e100.c	/^	NoSuchPhy = 0,$/;"	e	enum:eeprom_phy_iface	file:
NumLinesInBuf	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OpenCurFile	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:OpenCurFile(splitWin)$/;"	f
PCIE_NET_DRI_DEBUG	pcie_net_dri.h	336;"	d
PDEBUG	pcie_net_dri.h	348;"	d
PDEBUG	pcie_net_dri.h	354;"	d
PWD	Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	m6x_drv/src/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	test_dma/Makefile	/^PWD := $(shell pwd)$/;"	m
Path.AbsolutePathFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PersistentVarName	vimconfig/.vim/autoload/genutils.vim	/^function! s:PersistentVarName(pluginName, persistentVar)$/;"	f
PlaceDelimitersAndInsBetween	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
ProcessFile	vimconfig/.vim/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	vimconfig/.vim/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
QSortR	vimconfig/.vim/autoload/genutils.vim	/^function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)$/;"	f
RFD_BUF_LEN	e100.c	1912;"	d	file:
RU_RUNNING	e100.c	/^	RU_RUNNING	 = 1,$/;"	e	enum:ru_state	file:
RU_RUNNING	pcie_net_dri.h	/^	RU_RUNNING	 = 1,$/;"	e	enum:ru_state
RU_SUSPENDED	e100.c	/^	RU_SUSPENDED = 0,$/;"	e	enum:ru_state	file:
RU_SUSPENDED	pcie_net_dri.h	/^	RU_SUSPENDED = 0,$/;"	e	enum:ru_state
RU_UNINITIALIZED	e100.c	/^	RU_UNINITIALIZED = -1,$/;"	e	enum:ru_state	file:
RU_UNINITIALIZED	pcie_net_dri.h	/^	RU_UNINITIALIZED = -1,$/;"	e	enum:ru_state
RX_LEN	pcie_net_dri.h	360;"	d
ReleaseKeyPresses	vimconfig/.vim/plugin/supertab.vim	/^function! s:ReleaseKeyPresses()$/;"	f
RemapLookupFile	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:RemapLookupFile(cmd)$/;"	f
RemoveCComments	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! s:RemoveCComments(szLine)$/;"	f
RemoveDelimiters	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	vimconfig/.vim/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ReplaceDelims	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ResetSnippets	vimconfig/.vim/plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
ResolveAliasInNamespaceList	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasInNamespaceList(mapNamespaceAlias, listNamespaces)$/;"	f
ResolveAliasKey	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasKey(mapNamespaceAlias, szAlias)$/;"	f
ResolveAliasKeys	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:ResolveAliasKeys(mapNamespaceAlias)$/;"	f
ResolveCCast	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:ResolveCCast(tokens)$/;"	f
ResolveCast	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:ResolveCast(tokens, startChar, endChar)$/;"	f
ResolveCppCast	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:ResolveCppCast(tokens)$/;"	f
ResolveNamespace	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! s:ResolveNamespace(namespace, mapCurrentContexts)$/;"	f
ResolveSymbol	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:ResolveSymbol(contextStack, szSymbol, szTagFilter)$/;"	f
RestorePosn	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! s:RestorePosn(savedposn)$/;"	f
RestoreScreenState	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreSettings	vimconfig/.vim/plugin/echofunc.vim	/^function! s:RestoreSettings()$/;"	f
RestoreWindowSettings2	vimconfig/.vim/autoload/genutils.vim	/^function! s:RestoreWindowSettings2(id)$/;"	f
Right	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
S80C24	e100.c	/^	S80C24,$/;"	e	enum:eeprom_phy_iface	file:
S80C240	e100.c	/^	S80C240,$/;"	e	enum:eeprom_phy_iface	file:
SNR	vimconfig/.vim/autoload/genutils.vim	/^function! s:SNR()$/;"	f
SNR	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:SNR()$/;"	f
SavePosn	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! s:SavePosn(savewinhoriz)$/;"	f
SaveScreenState	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveSett	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:SaveSett(sett)$/;"	f
SearchDecl	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:SearchDecl(szVariable)$/;"	f
SearchGlobalMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:SearchGlobalMembers(szBase)$/;"	f
SearchMembers	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:SearchMembers(resolvedTagItem, szBase)$/;"	f
SearchTypeInfoOfDecl	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:SearchTypeInfoOfDecl(szVariable)$/;"	f
SelectCompletion	vimconfig/.vim/plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SelectWord	vimconfig/.vim/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
SetCompletionType	vimconfig/.vim/plugin/supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetDefaultCompletionType	vimconfig/.vim/plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetUpForNewFiletype	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
SetupBuf	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:SetupBuf()$/;"	f
ShowAvailableSnips	vimconfig/.vim/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowFiller	vimconfig/.vim/autoload/lookupfile.vim	/^function! s:ShowFiller()$/;"	f
StartBufExplorer	vimconfig/.vim/plugin/bufexplorer.vim	/^function! StartBufExplorer(open)$/;"	f
SuperTab	vimconfig/.vim/plugin/supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	vimconfig/.vim/plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	vimconfig/.vim/plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	vimconfig/.vim/plugin/supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabLongestHighlight	vimconfig/.vim/plugin/supertab.vim	/^function! SuperTabLongestHighlight(dir)$/;"	f
SuperTabSetCompletionType	vimconfig/.vim/plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	vimconfig/.vim/plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
TabSpace	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagList_IsValid	vimconfig/.vim/plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	vimconfig/.vim/plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	vimconfig/.vim/plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	vimconfig/.vim/plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TagPopupList	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! s:TagPopupList(szTypeName, szBase)$/;"	f
Tlist	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	vimconfig/.vim/plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	vimconfig/.vim/plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	vimconfig/.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	vimconfig/.vim/plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	vimconfig/.vim/plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	vimconfig/.vim/plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	vimconfig/.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	vimconfig/.vim/plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	vimconfig/.vim/plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	vimconfig/.vim/plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	vimconfig/.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
Toggle	vimconfig/.vim/macros/gdb_mappings.vim	/^function! s:Toggle()$/;"	f
TokensToString	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! s:TokensToString(tokens)$/;"	f
TranslateAlpha	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:TranslateAlpha(pat)$/;"	f
TranslateFileRegex	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:TranslateFileRegex(filePat)$/;"	f
TranslateFileWild	vimconfig/.vim/plugin/lookupfile.vim	/^function! s:TranslateFileWild(fileWild)$/;"	f
TreeDirNode.AbsoluteTreeRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	vimconfig/.vim/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UCODE_SIZE	e100.c	501;"	d	file:
UnEsc	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UntabbedCol	vimconfig/.vim/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	vimconfig/.vim/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	vimconfig/.vim/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	vimconfig/.vim/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	vimconfig/.vim/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
WillComplete	vimconfig/.vim/plugin/supertab.vim	/^function! s:WillComplete()$/;"	f
X	e100.c	451;"	d	file:
X	e100.c	453;"	d	file:
ZoomWin	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^com! ZoomWin :set lz|silent call ZoomWin#ZoomWin()|set nolz$/;"	c
ZoomWin	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^fun! ZoomWin()$/;"	f
ZoomWin#CleanupSessionFile	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! ZoomWin#CleanupSessionFile()$/;"	f
ZoomWin#ZoomWin	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! ZoomWin#ZoomWin()$/;"	f
ZoomWinPreserve	vimconfig/.vim/autoload/ZoomWin.vim	/^fun! s:ZoomWinPreserve(open)$/;"	f
__M6X_API_H__	m6x_drv/src/m6x_api.h	17;"	d
__M6X_API_H__	test_dma/m6x_api.h	17;"	d
__PCIE_NET_DRI_H_	pcie_net_dri.h	17;"	d
____cacheline_aligned	e100.c	/^	spinlock_t cb_lock			____cacheline_aligned;$/;"	m	struct:nic	file:
____cacheline_aligned	e100.c	/^	struct rx *rxs				____cacheline_aligned;$/;"	m	struct:nic	typeref:struct:nic::rxs	file:
____cacheline_aligned	e100.c	/^	u32 msg_enable				____cacheline_aligned;$/;"	m	struct:nic	file:
____cacheline_aligned	e100.c	/^	} flags					____cacheline_aligned;$/;"	m	struct:nic	typeref:enum:nic::__anon13	file:
____cacheline_aligned	pcie_net_dri.h	/^	spinlock_t cb_lock			____cacheline_aligned;$/;"	m	struct:pcie_ether_data_t
____cacheline_aligned	pcie_net_dri.h	/^	struct rx *rxs				____cacheline_aligned;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::rxs
____cacheline_aligned	pcie_net_dri.h	/^	u32 msg_enable				____cacheline_aligned;$/;"	m	struct:pcie_ether_data_t
____cacheline_aligned	pcie_net_dri.h	/^	} flags					____cacheline_aligned;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::__anon6
__e100_power_off	e100.c	/^static int __e100_power_off(struct pci_dev *pdev, bool wake)$/;"	f	file:
__e100_shutdown	e100.c	/^static void __e100_shutdown(struct pci_dev *pdev, bool *enable_wake)$/;"	f	file:
_makeArgumentList	vimconfig/.vim/autoload/genutils.vim	/^function! s:_makeArgumentList()$/;"	f
_makeArgumentString	vimconfig/.vim/autoload/genutils.vim	/^function! s:_makeArgumentString()$/;"	f
acp#completeSnipmate	vimconfig/.vim/autoload/acp.vim	/^function acp#completeSnipmate(findstart, base)$/;"	f
acp#disable	vimconfig/.vim/autoload/acp.vim	/^function acp#disable()$/;"	f
acp#enable	vimconfig/.vim/autoload/acp.vim	/^function acp#enable()$/;"	f
acp#lock	vimconfig/.vim/autoload/acp.vim	/^function acp#lock()$/;"	f
acp#meetsForCssOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForCssOmni(context)$/;"	f
acp#meetsForFile	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForFile(context)$/;"	f
acp#meetsForHtmlOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForHtmlOmni(context)$/;"	f
acp#meetsForKeyword	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForKeyword(context)$/;"	f
acp#meetsForPerlOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForPerlOmni(context)$/;"	f
acp#meetsForPythonOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForPythonOmni(context)$/;"	f
acp#meetsForRubyOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForRubyOmni(context)$/;"	f
acp#meetsForSnipmate	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForSnipmate(context)$/;"	f
acp#meetsForXmlOmni	vimconfig/.vim/autoload/acp.vim	/^function acp#meetsForXmlOmni(context)$/;"	f
acp#onBs	vimconfig/.vim/autoload/acp.vim	/^function acp#onBs()$/;"	f
acp#onPopupCloseSnipmate	vimconfig/.vim/autoload/acp.vim	/^function acp#onPopupCloseSnipmate()$/;"	f
acp#onPopupPost	vimconfig/.vim/autoload/acp.vim	/^function acp#onPopupPost()$/;"	f
acp#unlock	vimconfig/.vim/autoload/acp.vim	/^function acp#unlock()$/;"	f
activateNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
actual_size	e100.c	/^	__le16 actual_size;$/;"	m	struct:rfd	file:
actual_size	pcie_net_dri.h	/^	__le16 actual_size;$/;"	m	struct:rfd
adaptive_ifs	e100.c	/^	u8 adaptive_ifs;$/;"	m	struct:nic	file:
adaptive_ifs	e100.c	/^\/*2*\/	u8 adaptive_ifs;$/;"	m	struct:config	file:
adaptive_ifs	pcie_net_dri.h	/^	u8 adaptive_ifs;$/;"	m	struct:pcie_ether_data_t
addr	e100.c	/^	u8 addr[E100_MAX_MULTICAST_ADDRS * ETH_ALEN + 2\/*pad*\/];$/;"	m	struct:multi	file:
addr_lock	pcie_net_dri.h	/^	struct mutex addr_lock ; \/* 控制phy 和 eeprom 访问的锁*\/$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::mutex
app_signal_func	m6x_drv/src/app.c	/^void app_signal_func(int sig)  $/;"	f
arg_index	m6x_drv/src/ioctl.c	/^arg_t *arg_index(unsigned int index)$/;"	f
arg_t	m6x_drv/src/ioctl.c	/^} arg_t;$/;"	t	typeref:struct:__anon23	file:
args_value	m6x_drv/src/ioctl.c	/^unsigned long args_value(int index)$/;"	f
arp_wake	e100.c	/^	   link_status_wake:1), arp_wake:1), mcmatch_wake:1);$/;"	m	struct:config	file:
bakup_vimconfig	vimconfig/config.sh	/^function bakup_vimconfig()$/;"	f
bar	m6x_drv/src/pcie.c	/^	bar_info_t bar[8];$/;"	m	struct:__anon15	file:
bar	pcie_net_dri.h	/^	bar_info_t bar[8] ;$/;"	m	struct:pcie_ether_data_t
bar	test_dma/dma_test.c	/^	bar_info_t bar[8];$/;"	m	struct:__anon3	file:
bar_info_t	m6x_drv/src/pcie.c	/^} bar_info_t;$/;"	t	typeref:struct:__anon14	file:
bar_info_t	pcie_net_dri.h	/^} bar_info_t ;$/;"	t	typeref:struct:__anon5
bar_info_t	test_dma/dma_test.c	/^} bar_info_t;$/;"	t	typeref:struct:__anon2	file:
bar_num	m6x_drv/src/pcie.c	/^	int bar_num;$/;"	m	struct:__anon15	file:
bar_num	pcie_net_dri.h	/^	int bar_num ;$/;"	m	struct:pcie_ether_data_t
bar_num	test_dma/dma_test.c	/^	int bar_num;$/;"	m	struct:__anon3	file:
bindMappings	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
blank_rfd	e100.c	/^	struct rfd blank_rfd;$/;"	m	struct:nic	typeref:struct:nic::rfd	file:
blank_rfd	pcie_net_dri.h	/^	struct rfd blank_rfd;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::rfd
bookmarkNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buf_addr	e100.c	/^				__le32 buf_addr;$/;"	m	struct:cb::__anon9::__anon10::__anon11	file:
button_async	m6x_drv/src/ioctl.c	/^static struct fasync_struct *button_async; $/;"	v	typeref:struct:fasync_struct	file:
cb	e100.c	/^struct cb {$/;"	s	file:
cb_cid	e100.c	/^	cb_cid    = 0x1f00,$/;"	e	enum:cb_command	file:
cb_command	e100.c	/^enum cb_command {$/;"	g	file:
cb_complete	e100.c	/^	cb_complete = 0x8000,$/;"	e	enum:cb_status	file:
cb_config	e100.c	/^	cb_config = 0x0002,$/;"	e	enum:cb_command	file:
cb_dump	e100.c	/^	cb_dump   = 0x0006,$/;"	e	enum:cb_command	file:
cb_el	e100.c	/^	cb_el     = 0x8000,$/;"	e	enum:cb_command	file:
cb_i	e100.c	/^	cb_i      = 0x2000,$/;"	e	enum:cb_command	file:
cb_iaaddr	e100.c	/^	cb_iaaddr = 0x0001,$/;"	e	enum:cb_command	file:
cb_multi	e100.c	/^	cb_multi  = 0x0003,$/;"	e	enum:cb_command	file:
cb_nop	e100.c	/^	cb_nop    = 0x0000,$/;"	e	enum:cb_command	file:
cb_ok	e100.c	/^	cb_ok       = 0x2000,$/;"	e	enum:cb_status	file:
cb_s	e100.c	/^	cb_s      = 0x4000,$/;"	e	enum:cb_command	file:
cb_status	e100.c	/^enum cb_status {$/;"	g	file:
cb_to_clean	e100.c	/^	struct cb *cb_to_clean;$/;"	m	struct:nic	typeref:struct:nic::cb	file:
cb_to_clean	pcie_net_dri.h	/^	struct cb *cb_to_clean;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::cb
cb_to_send	e100.c	/^	struct cb *cb_to_send;$/;"	m	struct:nic	typeref:struct:nic::cb	file:
cb_to_send	pcie_net_dri.h	/^	struct cb *cb_to_send;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::cb
cb_to_use	e100.c	/^	struct cb *cb_to_use;$/;"	m	struct:nic	typeref:struct:nic::cb	file:
cb_to_use	pcie_net_dri.h	/^	struct cb *cb_to_use;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::cb
cb_tx	e100.c	/^	cb_tx     = 0x0004,$/;"	e	enum:cb_command	file:
cb_tx_nc	e100.c	/^	cb_tx_nc  = 0x0010,$/;"	e	enum:cb_command	file:
cb_tx_sf	e100.c	/^	cb_tx_sf  = 0x0008,$/;"	e	enum:cb_command	file:
cb_ucode	e100.c	/^	cb_ucode  = 0x0005,$/;"	e	enum:cb_command	file:
cbs	e100.c	/^	struct cb *cbs;$/;"	m	struct:nic	typeref:struct:nic::cb	file:
cbs	e100.c	/^	struct param_range cbs;$/;"	m	struct:params	typeref:struct:params::param_range	file:
cbs	pcie_net_dri.h	/^	struct cb *cbs;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::cb
cbs	pcie_net_dri.h	/^	struct param_range cbs;$/;"	m	struct:params	typeref:struct:params::param_range
cbs_avail	e100.c	/^	unsigned int cbs_avail;$/;"	m	struct:nic	file:
cbs_avail	pcie_net_dri.h	/^	unsigned int cbs_avail;$/;"	m	struct:pcie_ether_data_t
cbs_dma_addr	e100.c	/^	dma_addr_t cbs_dma_addr;$/;"	m	struct:nic	file:
cbs_dma_addr	pcie_net_dri.h	/^	dma_addr_t cbs_dma_addr;$/;"	m	struct:pcie_ether_data_t
cbs_pool	e100.c	/^	struct pci_pool *cbs_pool;$/;"	m	struct:nic	typeref:struct:nic::pci_pool	file:
cbs_pool	pcie_net_dri.h	/^	struct pci_pool *cbs_pool;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::pci_pool
centerView	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
char_drv_info	m6x_drv/src/ioctl.c	/^char_drv_info_t char_drv_info = { 0 };$/;"	v
char_drv_info_t	m6x_drv/src/ioctl.c	/^} char_drv_info_t;$/;"	t	typeref:struct:__anon21	file:
char_ioctl	m6x_drv/src/ioctl.c	/^long char_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f
char_ioctl_cmd	m6x_drv/src/ioctl.c	/^int char_ioctl_cmd(unsigned char *input, int input_len, tlv_t * replay)$/;"	f
char_ioctl_fasync	m6x_drv/src/ioctl.c	/^static int char_ioctl_fasync (int fd, struct file *filp, int on)  $/;"	f	file:
char_no_zero	m6x_drv/src/uart.c	/^int char_no_zero(unsigned char *dst, unsigned char *src, int *len)$/;"	f
char_open	m6x_drv/src/ioctl.c	/^int char_open(struct inode *inode, struct file *filp)$/;"	f
char_read	m6x_drv/src/ioctl.c	/^ssize_t char_read(struct file * filp, char __user * buffer, size_t count,$/;"	f
char_release	m6x_drv/src/ioctl.c	/^int char_release(struct inode *inode, struct file *filp)$/;"	f
char_write	m6x_drv/src/ioctl.c	/^ssize_t char_write(struct file * filp, const char __user * buffer, size_t count,$/;"	f
checkForActivate	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
class	m6x_drv/src/pps.c	/^	unsigned char  class;$/;"	m	struct:__anon17	file:
clearBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
cmd_args	m6x_drv/src/ioctl.c	/^static arg_t cmd_args[M6X_ARG_MAX] = {$/;"	v	file:
cmd_hi	e100.c	/^		u8 cmd_hi;$/;"	m	struct:csr::__anon8	file:
cmd_lo	e100.c	/^		u8 cmd_lo;$/;"	m	struct:csr::__anon8	file:
cmd_lock	e100.c	/^	spinlock_t cmd_lock;$/;"	m	struct:nic	file:
cmd_lock	pcie_net_dri.h	/^	spinlock_t cmd_lock;$/;"	m	struct:pcie_ether_data_t
cmdline_args	m6x_drv/src/ioctl.c	/^int cmdline_args(char *cmdline, char *cmd, arg_t * args, int argc)$/;"	f
command	e100.c	/^	__le16 command;$/;"	m	struct:cb	file:
command	e100.c	/^	__le16 command;$/;"	m	struct:rfd	file:
command	pcie_net_dri.h	/^	__le16 command;$/;"	m	struct:rfd
commentEnablers	vimconfig/.vim/plugin/NERD_commenter.vim	/^augroup commentEnablers$/;"	a
compareBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
complete	e100.c	/^	__le32 complete;$/;"	m	struct:stats	file:
completeBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
config	e100.c	/^		struct config config;$/;"	m	union:cb::__anon9	typeref:struct:cb::__anon9::config	file:
config	e100.c	/^struct config {$/;"	s	file:
config_vim	vimconfig/config.sh	/^function config_vim()$/;"	f
count	e100.c	/^	__le16 count;$/;"	m	struct:multi	file:
count	e100.c	/^	u32 count;$/;"	m	struct:param_range	file:
count	pcie_net_dri.h	/^	u32 count;$/;"	m	struct:param_range
cr	vimconfig/.vim/plugin/supertab.vim	/^      let cr = (map =~? '\\(^\\|[^)]\\)<cr>')$/;"	v
createTreeWin	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
crs_or_cdt	e100.c	/^	   pad15_2:1), crs_or_cdt:1);$/;"	m	struct:config	file:
csma_disabled	e100.c	/^\/*8*\/	u8 X(X(mii_mode:1, pad8:6), csma_disabled:1);$/;"	m	struct:config	file:
csr	e100.c	/^	struct csr __iomem *csr;$/;"	m	struct:nic	typeref:struct:nic::__iomem	file:
csr	e100.c	/^struct csr {$/;"	s	file:
csr	pcie_net_dri.h	/^	struct csr __iomem *csr;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::__iomem
ctrl_n	vimconfig/.vim/plugin/supertab.vim	/^    let ctrl_n = substitute(ctrl_n, '<', '<lt>', 'g')$/;"	v
ctrl_n	vimconfig/.vim/plugin/supertab.vim	/^  let ctrl_n = maparg('<c-n>', 'i')$/;"	v
ctrl_p	vimconfig/.vim/plugin/supertab.vim	/^    let ctrl_p = substitute(ctrl_p, '<', '<lt>', 'g')$/;"	v
ctrl_p	vimconfig/.vim/plugin/supertab.vim	/^  let ctrl_p = maparg('<c-p>', 'i')$/;"	v
cuc_cmd	e100.c	/^	enum scb_cmd_lo cuc_cmd;$/;"	m	struct:nic	typeref:enum:nic::scb_cmd_lo	file:
cuc_cmd	pcie_net_dri.h	/^	enum scb_cmd_lo cuc_cmd;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::scb_cmd_lo
cuc_dump	e100.c	/^enum cuc_dump {$/;"	g	file:
cuc_dump_addr	e100.c	/^	cuc_dump_addr  = 0x40,$/;"	e	enum:scb_cmd_lo	file:
cuc_dump_addr	pcie_net_dri.h	/^	cuc_dump_addr  = 0x40,$/;"	e	enum:scb_cmd_lo
cuc_dump_complete	e100.c	/^	cuc_dump_complete       = 0x0000A005,$/;"	e	enum:cuc_dump	file:
cuc_dump_reset	e100.c	/^	cuc_dump_reset = 0x70,$/;"	e	enum:scb_cmd_lo	file:
cuc_dump_reset	pcie_net_dri.h	/^	cuc_dump_reset = 0x70,$/;"	e	enum:scb_cmd_lo
cuc_dump_reset_complete	e100.c	/^	cuc_dump_reset_complete = 0x0000A007,$/;"	e	enum:cuc_dump	file:
cuc_dump_stats	e100.c	/^	cuc_dump_stats = 0x50,$/;"	e	enum:scb_cmd_lo	file:
cuc_dump_stats	pcie_net_dri.h	/^	cuc_dump_stats = 0x50,$/;"	e	enum:scb_cmd_lo
cuc_load_base	e100.c	/^	cuc_load_base  = 0x60,$/;"	e	enum:scb_cmd_lo	file:
cuc_load_base	pcie_net_dri.h	/^	cuc_load_base  = 0x60,$/;"	e	enum:scb_cmd_lo
cuc_nop	e100.c	/^	cuc_nop        = 0x00,$/;"	e	enum:scb_cmd_lo	file:
cuc_nop	pcie_net_dri.h	/^	cuc_nop        = 0x00,$/;"	e	enum:scb_cmd_lo
cuc_resume	e100.c	/^	cuc_resume     = 0x20,$/;"	e	enum:scb_cmd_lo	file:
cuc_resume	pcie_net_dri.h	/^	cuc_resume     = 0x20,$/;"	e	enum:scb_cmd_lo
cuc_start	e100.c	/^	cuc_start      = 0x10,$/;"	e	enum:scb_cmd_lo	file:
cuc_start	pcie_net_dri.h	/^	cuc_start      = 0x10,$/;"	e	enum:scb_cmd_lo
debug	e100.c	/^static int debug = 3;$/;"	v	file:
debug	pcie_net_dri.c	/^static int debug = 3 ;$/;"	v	file:
def	m6x_drv/src/ioctl.c	/^	unsigned long def;$/;"	m	struct:__anon23	file:
defineOption	vimconfig/.vim/plugin/acp.vim	/^function s:defineOption(name, default)$/;"	f
deleteBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
dev	m6x_drv/src/pcie.c	/^	struct pci_dev *dev;$/;"	m	struct:__anon15	typeref:struct:__anon15::pci_dev	file:
dev	test_dma/dma_test.c	/^	struct pci_dev *dev;$/;"	m	struct:__anon3	typeref:struct:__anon3::pci_dev	file:
device_id	m6x_drv/src/pcie.c	/^	unsigned short device_id;$/;"	m	struct:__anon15	file:
device_id	pcie_net_dri.h	/^	unsigned char device_id ;$/;"	m	struct:pcie_ether_data_t
device_id	test_dma/dma_test.c	/^	unsigned short device_id;$/;"	m	struct:__anon3	file:
displayHelp	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dm_t	m6x_drv/src/m6x_api.h	/^}dm_t;$/;"	t	typeref:struct:__anon16
dm_t	pcie_net_dri.h	/^}dm_t;$/;"	t	typeref:struct:__anon4
dm_t	test_dma/m6x_api.h	/^}dm_t;$/;"	t	typeref:struct:__anon1
dma_addr	e100.c	/^	dma_addr_t dma_addr;$/;"	m	struct:cb	file:
dma_addr	e100.c	/^	dma_addr_t dma_addr;$/;"	m	struct:nic	file:
dma_addr	e100.c	/^	dma_addr_t dma_addr;$/;"	m	struct:rx	file:
dma_addr	pcie_net_dri.h	/^	dma_addr_t dma_addr;$/;"	m	struct:pcie_ether_data_t
dma_send_timer	test_dma/dma_test.c	/^struct timer_list dma_send_timer;$/;"	v	typeref:struct:timer_list
dma_send_timer_func	test_dma/dma_test.c	/^void dma_send_timer_func(unsigned long data)$/;"	f
dma_test_exit	test_dma/dma_test.c	/^module_exit(dma_test_exit);$/;"	v
dma_test_exit	test_dma/dma_test.c	/^static void __exit dma_test_exit(void)$/;"	f	file:
dma_test_init	test_dma/dma_test.c	/^module_init(dma_test_init);$/;"	v
dma_test_init	test_dma/dma_test.c	/^static int __init dma_test_init(void)$/;"	f	file:
dmalloc	m6x_drv/src/pcie.c	/^int dmalloc(dm_t *dm, int size)$/;"	f
dmalloc	pcie_net_dri.c	/^int dmalloc(struct net_device *netdev,dm_t *dm, int size)$/;"	f
dmalloc	test_dma/dma_test.c	/^int dmalloc(dm_t *dm, int size)$/;"	f
dmfree	m6x_drv/src/pcie.c	/^int dmfree(dm_t *dm)$/;"	f
dmfree	pcie_net_dri.c	/^int dmfree( struct net_device *netdev,dm_t *dm)$/;"	f
dumpHelp	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dump_buf	e100.c	/^	u8 dump_buf[596];$/;"	m	struct:mem	file:
dump_buf	pcie_net_dri.h	/^	u8 dump_buf[596];$/;"	m	struct:mem
dump_buffer_addr	e100.c	/^		__le32 dump_buffer_addr;$/;"	m	union:cb::__anon9	file:
e100_adjust_adaptive_ifs	e100.c	/^static void e100_adjust_adaptive_ifs(struct nic *nic, int speed, int duplex)$/;"	f	file:
e100_alloc	e100.c	/^static int e100_alloc(struct nic *nic)$/;"	f	file:
e100_alloc_cbs	e100.c	/^static int e100_alloc_cbs(struct nic *nic)$/;"	f	file:
e100_asf	e100.c	/^static int e100_asf(struct nic *nic)$/;"	f	file:
e100_change_mtu	e100.c	/^static int e100_change_mtu(struct net_device *netdev, int new_mtu)$/;"	f	file:
e100_clean_cbs	e100.c	/^static void e100_clean_cbs(struct nic *nic)$/;"	f	file:
e100_cleanup_module	e100.c	/^module_exit(e100_cleanup_module);$/;"	v
e100_cleanup_module	e100.c	/^static void __exit e100_cleanup_module(void)$/;"	f	file:
e100_close	e100.c	/^static int e100_close(struct net_device *netdev)$/;"	f	file:
e100_configure	e100.c	/^static void e100_configure(struct nic *nic, struct cb *cb, struct sk_buff *skb)$/;"	f	file:
e100_diag_test	e100.c	/^static void e100_diag_test(struct net_device *netdev,$/;"	f	file:
e100_disable_irq	e100.c	/^static void e100_disable_irq(struct nic *nic)$/;"	f	file:
e100_do_ioctl	e100.c	/^static int e100_do_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)$/;"	f	file:
e100_down	e100.c	/^static void e100_down(struct nic *nic)$/;"	f	file:
e100_driver	e100.c	/^static struct pci_driver e100_driver = {$/;"	v	typeref:struct:pci_driver	file:
e100_dump	e100.c	/^static void e100_dump(struct nic *nic, struct cb *cb, struct sk_buff *skb)$/;"	f	file:
e100_eeprom_load	e100.c	/^static int e100_eeprom_load(struct nic *nic)$/;"	f	file:
e100_eeprom_read	e100.c	/^static __le16 e100_eeprom_read(struct nic *nic, u16 *addr_len, u16 addr)$/;"	f	file:
e100_eeprom_save	e100.c	/^static int e100_eeprom_save(struct nic *nic, u16 start, u16 count)$/;"	f	file:
e100_eeprom_write	e100.c	/^static void e100_eeprom_write(struct nic *nic, u16 addr_len, u16 addr, __le16 data)$/;"	f	file:
e100_enable_irq	e100.c	/^static void e100_enable_irq(struct nic *nic)$/;"	f	file:
e100_err_handler	e100.c	/^static struct pci_error_handlers e100_err_handler = {$/;"	v	typeref:struct:pci_error_handlers	file:
e100_ethtool_ops	e100.c	/^static const struct ethtool_ops e100_ethtool_ops = {$/;"	v	typeref:struct:ethtool_ops	file:
e100_exec_cb	e100.c	/^static int e100_exec_cb(struct nic *nic, struct sk_buff *skb,$/;"	f	file:
e100_exec_cmd	e100.c	/^static int e100_exec_cmd(struct nic *nic, u8 cmd, dma_addr_t dma_addr)$/;"	f	file:
e100_free	e100.c	/^static void e100_free(struct nic *nic)$/;"	f	file:
e100_get_defaults	e100.c	/^static void e100_get_defaults(struct nic *nic)$/;"	f	file:
e100_get_drvinfo	e100.c	/^static void e100_get_drvinfo(struct net_device *netdev,$/;"	f	file:
e100_get_eeprom	e100.c	/^static int e100_get_eeprom(struct net_device *netdev,$/;"	f	file:
e100_get_eeprom_len	e100.c	/^static int e100_get_eeprom_len(struct net_device *netdev)$/;"	f	file:
e100_get_ethtool_stats	e100.c	/^static void e100_get_ethtool_stats(struct net_device *netdev,$/;"	f	file:
e100_get_link	e100.c	/^static u32 e100_get_link(struct net_device *netdev)$/;"	f	file:
e100_get_msglevel	e100.c	/^static u32 e100_get_msglevel(struct net_device *netdev)$/;"	f	file:
e100_get_regs	e100.c	/^static void e100_get_regs(struct net_device *netdev,$/;"	f	file:
e100_get_regs_len	e100.c	/^static int e100_get_regs_len(struct net_device *netdev)$/;"	f	file:
e100_get_ringparam	e100.c	/^static void e100_get_ringparam(struct net_device *netdev,$/;"	f	file:
e100_get_settings	e100.c	/^static int e100_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd)$/;"	f	file:
e100_get_sset_count	e100.c	/^static int e100_get_sset_count(struct net_device *netdev, int sset)$/;"	f	file:
e100_get_strings	e100.c	/^static void e100_get_strings(struct net_device *netdev, u32 stringset, u8 *data)$/;"	f	file:
e100_get_wol	e100.c	/^static void e100_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)$/;"	f	file:
e100_gstrings_stats	e100.c	/^static const char e100_gstrings_stats[][ETH_GSTRING_LEN] = {$/;"	v	file:
e100_gstrings_test	e100.c	/^static const char e100_gstrings_test[][ETH_GSTRING_LEN] = {$/;"	v	file:
e100_hw_init	e100.c	/^static int e100_hw_init(struct nic *nic)$/;"	f	file:
e100_hw_reset	e100.c	/^static void e100_hw_reset(struct nic *nic)$/;"	f	file:
e100_id_table	e100.c	/^static DEFINE_PCI_DEVICE_TABLE(e100_id_table) = {$/;"	v	file:
e100_init_module	e100.c	/^module_init(e100_init_module);$/;"	v
e100_init_module	e100.c	/^static int __init e100_init_module(void)$/;"	f	file:
e100_intr	e100.c	/^static irqreturn_t e100_intr(int irq, void *dev_id)$/;"	f	file:
e100_io_error_detected	e100.c	/^static pci_ers_result_t e100_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)$/;"	f	file:
e100_io_resume	e100.c	/^static void e100_io_resume(struct pci_dev *pdev)$/;"	f	file:
e100_io_slot_reset	e100.c	/^static pci_ers_result_t e100_io_slot_reset(struct pci_dev *pdev)$/;"	f	file:
e100_load_ucode_wait	e100.c	/^static inline int e100_load_ucode_wait(struct nic *nic)$/;"	f	file:
e100_loopback_test	e100.c	/^static int e100_loopback_test(struct nic *nic, enum loopback loopback_mode)$/;"	f	file:
e100_multi	e100.c	/^static void e100_multi(struct nic *nic, struct cb *cb, struct sk_buff *skb)$/;"	f	file:
e100_netdev_ops	e100.c	/^static const struct net_device_ops e100_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
e100_netpoll	e100.c	/^static void e100_netpoll(struct net_device *netdev)$/;"	f	file:
e100_nway_reset	e100.c	/^static int e100_nway_reset(struct net_device *netdev)$/;"	f	file:
e100_open	e100.c	/^static int e100_open(struct net_device *netdev)$/;"	f	file:
e100_phy_check_without_mii	e100.c	/^static int e100_phy_check_without_mii(struct nic *nic)$/;"	f	file:
e100_phy_init	e100.c	/^static int e100_phy_init(struct nic *nic)$/;"	f	file:
e100_phy_supports_mii	e100.c	/^static inline int e100_phy_supports_mii(struct nic *nic)$/;"	f	file:
e100_poll	e100.c	/^static int e100_poll(struct napi_struct *napi, int budget)$/;"	f	file:
e100_probe	e100.c	/^static int __devinit e100_probe(struct pci_dev *pdev,$/;"	f	file:
e100_remove	e100.c	/^static void __devexit e100_remove(struct pci_dev *pdev)$/;"	f	file:
e100_request_firmware	e100.c	/^static const struct firmware *e100_request_firmware(struct nic *nic)$/;"	f	file:
e100_resume	e100.c	/^static int e100_resume(struct pci_dev *pdev)$/;"	f	file:
e100_rx_alloc_list	e100.c	/^static int e100_rx_alloc_list(struct nic *nic)$/;"	f	file:
e100_rx_alloc_skb	e100.c	/^static int e100_rx_alloc_skb(struct nic *nic, struct rx *rx)$/;"	f	file:
e100_rx_clean	e100.c	/^static void e100_rx_clean(struct nic *nic, unsigned int *work_done,$/;"	f	file:
e100_rx_clean_list	e100.c	/^static void e100_rx_clean_list(struct nic *nic)$/;"	f	file:
e100_rx_indicate	e100.c	/^static int e100_rx_indicate(struct nic *nic, struct rx *rx,$/;"	f	file:
e100_self_test	e100.c	/^static int e100_self_test(struct nic *nic)$/;"	f	file:
e100_set_eeprom	e100.c	/^static int e100_set_eeprom(struct net_device *netdev,$/;"	f	file:
e100_set_features	e100.c	/^static int e100_set_features(struct net_device *netdev,$/;"	f	file:
e100_set_mac_address	e100.c	/^static int e100_set_mac_address(struct net_device *netdev, void *p)$/;"	f	file:
e100_set_msglevel	e100.c	/^static void e100_set_msglevel(struct net_device *netdev, u32 value)$/;"	f	file:
e100_set_multicast_list	e100.c	/^static void e100_set_multicast_list(struct net_device *netdev)$/;"	f	file:
e100_set_phys_id	e100.c	/^static int e100_set_phys_id(struct net_device *netdev,$/;"	f	file:
e100_set_ringparam	e100.c	/^static int e100_set_ringparam(struct net_device *netdev,$/;"	f	file:
e100_set_settings	e100.c	/^static int e100_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd)$/;"	f	file:
e100_set_wol	e100.c	/^static int e100_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)$/;"	f	file:
e100_setup_iaaddr	e100.c	/^static void e100_setup_iaaddr(struct nic *nic, struct cb *cb,$/;"	f	file:
e100_setup_ucode	e100.c	/^static void e100_setup_ucode(struct nic *nic, struct cb *cb,$/;"	f	file:
e100_shutdown	e100.c	/^static void e100_shutdown(struct pci_dev *pdev)$/;"	f	file:
e100_start_receiver	e100.c	/^static inline void e100_start_receiver(struct nic *nic, struct rx *rx)$/;"	f	file:
e100_suspend	e100.c	/^static int e100_suspend(struct pci_dev *pdev, pm_message_t state)$/;"	f	file:
e100_tx_clean	e100.c	/^static int e100_tx_clean(struct nic *nic)$/;"	f	file:
e100_tx_timeout	e100.c	/^static void e100_tx_timeout(struct net_device *netdev)$/;"	f	file:
e100_tx_timeout_task	e100.c	/^static void e100_tx_timeout_task(struct work_struct *work)$/;"	f	file:
e100_up	e100.c	/^static int e100_up(struct nic *nic)$/;"	f	file:
e100_update_stats	e100.c	/^static void e100_update_stats(struct nic *nic)$/;"	f	file:
e100_watchdog	e100.c	/^static void e100_watchdog(unsigned long data)$/;"	f	file:
e100_write_flush	e100.c	/^static inline void e100_write_flush(struct nic *nic)$/;"	f	file:
e100_xmit_frame	e100.c	/^static netdev_tx_t e100_xmit_frame(struct sk_buff *skb,$/;"	f	file:
e100_xmit_prepare	e100.c	/^static void e100_xmit_prepare(struct nic *nic, struct cb *cb,$/;"	f	file:
echo	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
eecs	e100.c	/^	eecs = 0x02,$/;"	e	enum:eeprom_ctrl_lo	file:
eedi	e100.c	/^	eedi = 0x04,$/;"	e	enum:eeprom_ctrl_lo	file:
eedo	e100.c	/^	eedo = 0x08,$/;"	e	enum:eeprom_ctrl_lo	file:
eeprom	e100.c	/^	__le16 eeprom[256];$/;"	m	struct:nic	file:
eeprom	pcie_net_dri.h	/^	__le16 eeprom[256];$/;"	m	struct:pcie_ether_data_t
eeprom_asf	e100.c	/^	eeprom_asf = 0x8000,$/;"	e	enum:eeprom_config_asf	file:
eeprom_bad_csum_allow	e100.c	/^static int eeprom_bad_csum_allow = 0;$/;"	v	file:
eeprom_cnfg_mdix	e100.c	/^	eeprom_cnfg_mdix  = 0x03,$/;"	e	enum:eeprom_offsets	file:
eeprom_cnfg_mdix	e100.c	/^enum eeprom_cnfg_mdix {$/;"	g	file:
eeprom_config_asf	e100.c	/^	eeprom_config_asf = 0x0D,$/;"	e	enum:eeprom_offsets	file:
eeprom_config_asf	e100.c	/^enum eeprom_config_asf {$/;"	g	file:
eeprom_ctrl_hi	e100.c	/^	u8 eeprom_ctrl_hi;$/;"	m	struct:csr	file:
eeprom_ctrl_lo	e100.c	/^	u8 eeprom_ctrl_lo;$/;"	m	struct:csr	file:
eeprom_ctrl_lo	e100.c	/^enum eeprom_ctrl_lo {$/;"	g	file:
eeprom_gcl	e100.c	/^	eeprom_gcl = 0x4000,$/;"	e	enum:eeprom_config_asf	file:
eeprom_id	e100.c	/^	eeprom_id         = 0x0A,$/;"	e	enum:eeprom_offsets	file:
eeprom_id	e100.c	/^enum eeprom_id {$/;"	g	file:
eeprom_id_wol	e100.c	/^	eeprom_id_wol = 0x0020,$/;"	e	enum:eeprom_id	file:
eeprom_mdix_enabled	e100.c	/^	eeprom_mdix_enabled = 0x0080,$/;"	e	enum:eeprom_cnfg_mdix	file:
eeprom_offsets	e100.c	/^enum eeprom_offsets {$/;"	g	file:
eeprom_op	e100.c	/^enum eeprom_op {$/;"	g	file:
eeprom_phy_iface	e100.c	/^	eeprom_phy_iface  = 0x06,$/;"	e	enum:eeprom_offsets	file:
eeprom_phy_iface	e100.c	/^enum eeprom_phy_iface {$/;"	g	file:
eeprom_smbus_addr	e100.c	/^	eeprom_smbus_addr = 0x90,$/;"	e	enum:eeprom_offsets	file:
eeprom_wc	e100.c	/^	u16 eeprom_wc;$/;"	m	struct:nic	file:
eeprom_wc	pcie_net_dri.h	/^	u16 eeprom_wc;$/;"	m	struct:pcie_ether_data_t
eesk	e100.c	/^	eesk = 0x01,$/;"	e	enum:eeprom_ctrl_lo	file:
eol	e100.c	/^				u16 eol;$/;"	m	struct:cb::__anon9::__anon10::__anon11	file:
exec	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
fc_delay_hi	e100.c	/^\/*17*\/	u8 fc_delay_hi;$/;"	m	struct:config	file:
fc_delay_lo	e100.c	/^\/*16*\/	u8 fc_delay_lo;$/;"	m	struct:config	file:
fc_priority_threshold	e100.c	/^	   rx_long_ok:1), fc_priority_threshold:3), pad18:1);$/;"	m	struct:config	file:
fc_rcv_pause	e100.c	/^	__le32 fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:stats	file:
fc_rcv_unsupported	e100.c	/^	__le32 fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:stats	file:
fc_xmt_pause	e100.c	/^	__le32 fc_xmt_pause, fc_rcv_pause, fc_rcv_unsupported;$/;"	m	struct:stats	file:
fcs	m6x_drv/src/pps.c	/^	unsigned char  fcs;$/;"	m	struct:__anon18	file:
fcs	m6x_drv/src/pps.c	/^	unsigned char  fcs;$/;"	m	struct:__anon19	file:
feedPopup	vimconfig/.vim/autoload/acp.vim	/^function s:feedPopup()$/;"	f
findAndRevealPath	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
finishPopup	vimconfig/.vim/autoload/acp.vim	/^function s:finishPopup(fGroup1)$/;"	f
firstUsableWindow	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
flash_ctrl	e100.c	/^	u16 flash_ctrl;$/;"	m	struct:csr	file:
fop	m6x_drv/src/ioctl.c	/^static struct file_operations fop = {$/;"	v	typeref:struct:file_operations	file:
full_duplex_force	e100.c	/^	   full_duplex_force:1), full_duplex_pin:1);$/;"	m	struct:config	file:
full_duplex_pin	e100.c	/^	   full_duplex_force:1), full_duplex_pin:1);$/;"	m	struct:config	file:
fw	e100.c	/^	const struct firmware *fw;$/;"	m	struct:nic	typeref:struct:nic::firmware	file:
fw	pcie_net_dri.h	/^	const struct firmware *fw;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::firmware
g:BufExplorer_title	vimconfig/.vim/plugin/bufexplorer.vim	/^let g:BufExplorer_title = "\\[Buf\\ List\\]"$/;"	v
g:EchoFuncKeyNext	vimconfig/.vim/plugin/echofunc.vim	/^    let g:EchoFuncKeyNext='<M-=>'$/;"	v
g:EchoFuncKeyPrev	vimconfig/.vim/plugin/echofunc.vim	/^    let g:EchoFuncKeyPrev='<M-->'$/;"	v
g:EchoFuncLangsDict	vimconfig/.vim/plugin/echofunc.vim	/^    let g:EchoFuncLangsDict={$/;"	v
g:EchoFuncLangsUsed	vimconfig/.vim/plugin/echofunc.vim	/^    let g:EchoFuncLangsUsed=sort(keys(g:EchoFuncLangsDict))$/;"	v
g:EchoFuncMaxBalloonDeclarations	vimconfig/.vim/plugin/echofunc.vim	/^    let g:EchoFuncMaxBalloonDeclarations=20$/;"	v
g:GetLatestVimScripts_allowautoinstall	vimconfig/.vim/autoload/getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	vimconfig/.vim/autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	vimconfig/.vim/autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	vimconfig/.vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:LookupFile_AllowNewFiles	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_AllowNewFiles = 1$/;"	v
g:LookupFile_AlwaysAcceptFirst	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_AlwaysAcceptFirst = 0$/;"	v
g:LookupFile_Bufs_BufListExpr	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_Bufs_BufListExpr = ''$/;"	v
g:LookupFile_Bufs_LikeBufCmd	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_Bufs_LikeBufCmd = 1$/;"	v
g:LookupFile_Bufs_SkipUnlisted	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_Bufs_SkipUnlisted = 1$/;"	v
g:LookupFile_DefaultCmd	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_DefaultCmd = ':LUTags'$/;"	v
g:LookupFile_DisableDefaultMap	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_DisableDefaultMap = 0$/;"	v
g:LookupFile_EnableRemapCmd	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_EnableRemapCmd = 1$/;"	v
g:LookupFile_EscCancelsPopup	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_EscCancelsPopup = 1$/;"	v
g:LookupFile_FileFilter	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_FileFilter = ''$/;"	v
g:LookupFile_LookupAcceptFunc	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_LookupAcceptFunc = ''$/;"	v
g:LookupFile_LookupFunc	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_LookupFunc = ''$/;"	v
g:LookupFile_LookupNotifyFunc	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_LookupNotifyFunc = ''$/;"	v
g:LookupFile_MinPatLength	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_MinPatLength = 4$/;"	v
g:LookupFile_OnCursorMovedI	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_OnCursorMovedI = 0$/;"	v
g:LookupFile_PreserveLastPattern	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_PreserveLastPattern = 1$/;"	v
g:LookupFile_PreservePatternHistory	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_PreservePatternHistory = 1$/;"	v
g:LookupFile_RecentFileListSize	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_RecentFileListSize = 20$/;"	v
g:LookupFile_SearchForBufsInTabs	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_SearchForBufsInTabs = 1$/;"	v
g:LookupFile_ShowFiller	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_ShowFiller = 1$/;"	v
g:LookupFile_SortMethod	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_SortMethod = 'alpha'$/;"	v
g:LookupFile_TagExpr	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_TagExpr = '&tags'$/;"	v
g:LookupFile_TagsExpandCamelCase	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_TagsExpandCamelCase = 1$/;"	v
g:LookupFile_UpdateTime	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_UpdateTime = 300$/;"	v
g:LookupFile_UsingSpecializedTags	vimconfig/.vim/plugin/lookupfile.vim	/^  let g:LookupFile_UsingSpecializedTags = 0$/;"	v
g:NERDTreeBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	vimconfig/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	vimconfig/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	vimconfig/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	vimconfig/.vim/plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	vimconfig/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	vimconfig/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:ST_WIN_CMD	vimconfig/.vim/autoload/genutils.vim	/^let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2$/;"	v
g:SuperTabCompletionContexts	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabCrMapping	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabDefaultCompletionType	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	vimconfig/.vim/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['\\s']$/;"	v
g:SuperTabNoCompleteAfter	vimconfig/.vim/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	vimconfig/.vim/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	vimconfig/.vim/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	vimconfig/.vim/plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:bufexplorer_version	vimconfig/.vim/plugin/bufexplorer.vim	/^let g:bufexplorer_version = "7.2.8"$/;"	v
g:did_ft	vimconfig/.vim/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:getscript_cygwin	vimconfig/.vim/autoload/getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	vimconfig/.vim/autoload/getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	vimconfig/.vim/autoload/getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^   let g:getscript_shq= "'"$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^   let g:getscript_shq= '"'$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^  let g:getscript_shq= "'"$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^  let g:getscript_shq= &shq$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^  let g:getscript_shq= &sxq$/;"	v
g:getscript_shq	vimconfig/.vim/autoload/getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/;"	v
g:loaded_ZoomWin	vimconfig/.vim/autoload/ZoomWin.vim	/^let g:loaded_ZoomWin = "v23"$/;"	v
g:loaded_ZoomWinPlugin	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^let g:loaded_ZoomWinPlugin = "v23"$/;"	v
g:loaded_acp	vimconfig/.vim/plugin/acp.vim	/^let g:loaded_acp = 1$/;"	v
g:loaded_autoload_acp	vimconfig/.vim/autoload/acp.vim	/^let g:loaded_autoload_acp = 1$/;"	v
g:loaded_getscript	vimconfig/.vim/autoload/getscript.vim	/^let g:loaded_getscript= "v29"$/;"	v
g:loaded_getscriptPlugin	vimconfig/.vim/plugin/getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v29"$/;"	v
g:loaded_lookupfile	vimconfig/.vim/plugin/lookupfile.vim	/^let g:loaded_lookupfile = 108$/;"	v
g:loaded_nerdtree_exec_menuitem	vimconfig/.vim/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:lookupfile#lastPattern	vimconfig/.vim/autoload/lookupfile.vim	/^let g:lookupfile#lastPattern = ""$/;"	v
g:lookupfile#lastResults	vimconfig/.vim/autoload/lookupfile.vim	/^let g:lookupfile#lastResults = []$/;"	v
g:lookupfile#lastStatsMsg	vimconfig/.vim/autoload/lookupfile.vim	/^let g:lookupfile#lastStatsMsg = []$/;"	v
g:lookupfile#recentFiles	vimconfig/.vim/autoload/lookupfile.vim	/^let g:lookupfile#recentFiles = []$/;"	v
g:makeArgumentList	vimconfig/.vim/autoload/genutils.vim	/^let g:makeArgumentList = 'exec genutils#MakeArgumentList()'$/;"	v
g:makeArgumentString	vimconfig/.vim/autoload/genutils.vim	/^let g:makeArgumentString = 'exec genutils#MakeArgumentString()'$/;"	v
g:omni#cpp#includes#CACHE_FILE_TIME	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^let g:omni#cpp#includes#CACHE_FILE_TIME = {}$/;"	v
g:omni#cpp#includes#CACHE_INCLUDES	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^let g:omni#cpp#includes#CACHE_INCLUDES = {}$/;"	v
g:omni#cpp#namespaces#CacheResolve	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^let g:omni#cpp#namespaces#CacheResolve = {}$/;"	v
g:omni#cpp#namespaces#CacheUsing	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^let g:omni#cpp#namespaces#CacheUsing = {}$/;"	v
g:omni#cpp#utils#CACHE_TAG_INHERITS	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#CACHE_TAG_INHERITS = {}$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope .= "&& (!has_key(v:val, 'enum') || (has_key(v:val, 'enum') && v:val.enum =~ '^\\\\w\\\\+$')))"$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope = "(!has_key(v:val, 'class') && !has_key(v:val, 'struct') && !has_key(v:val, 'union') && !has_key(v:val, 'namespace')"$/;"	v
g_fd	m6x_drv/src/app.c	/^static int g_fd;$/;"	v	file:
gen_ptr	e100.c	/^		u32 gen_ptr;$/;"	m	struct:csr::__anon8	file:
genutils#AddNotifyWindowClose	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#AddNotifyWindowClose(windowTitle, functionName)$/;"	f
genutils#AddToFCShellPre	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#AddToFCShellPre(funcName)$/;"	f
genutils#AlignWordWithWordInPreviousLine	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#AlignWordWithWordInPreviousLine()$/;"	f
genutils#ArrayVarExists	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ArrayVarExists(varName, index)$/;"	f
genutils#BinInsertSort	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#BinInsertSort(cmp, direction) range$/;"	f
genutils#BinInsertSort2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#BinInsertSort2(start, end, cmp, direction, accessor, mover, context)$/;"	f
genutils#BinSearchForInsert	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#BinSearchForInsert(start, end, line, cmp, direction)$/;"	f
genutils#BinSearchForInsert2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#BinSearchForInsert2(start, end, line, cmp, direction,$/;"	f
genutils#BinSearchList	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#BinSearchList(list, start, end, item, cmp)$/;"	f
genutils#CenterWordInSpace	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CenterWordInSpace()$/;"	f
genutils#CheckWindowClose	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CheckWindowClose()$/;"	f
genutils#CleanDiffOptions	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CleanDiffOptions()$/;"	f
genutils#CleanupFileName	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CleanupFileName(fileName)$/;"	f
genutils#CleanupFileName2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CleanupFileName2(fileName, win32ProtectedChars)$/;"	f
genutils#ClearAllSigns	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ClearAllSigns()$/;"	f
genutils#CloseWinNoEa	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CloseWinNoEa(winnr, force)$/;"	f
genutils#CloseWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CloseWindow(win, force)$/;"	f
genutils#CmpByLength	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpByLength(line1, line2, ...)$/;"	f
genutils#CmpByLineLengthNname	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpByLineLengthNname(line1, line2, ...)$/;"	f
genutils#CmpByNumber	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpByNumber(line1, line2, ...)$/;"	f
genutils#CmpByString	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpByString(line1, line2, ...)$/;"	f
genutils#CmpByStringIgnoreCase	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpByStringIgnoreCase(line1, line2, ...)$/;"	f
genutils#CmpJavaImports	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CmpJavaImports(line1, line2, ...)$/;"	f
genutils#CommonPath	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CommonPath(path1, path2, ...)$/;"	f
genutils#CommonString	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CommonString(str1, str2)$/;"	f
genutils#CrUnProtectedCharsPattern	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CrUnProtectedCharsPattern(chars, ...)$/;"	f
genutils#CreateArgString	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CreateArgString(argList, sep, ...)$/;"	f
genutils#CurLineHasSign	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#CurLineHasSign()$/;"	f
genutils#DeEscape	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#DeEscape(str)$/;"	f
genutils#DebugShowArgs	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#DebugShowArgs(...)$/;"	f
genutils#DefFCShellInstall	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#DefFCShellInstall()$/;"	f
genutils#DefFCShellUninstall	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#DefFCShellUninstall()$/;"	f
genutils#DefFileChangedShell	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#DefFileChangedShell()$/;"	f
genutils#EatChar	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#EatChar(pat)$/;"	f
genutils#Escape	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#Escape(str, chars)$/;"	f
genutils#EscapeCommand	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#EscapeCommand(cmd, args, pipe)$/;"	f
genutils#ExpandStr	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ExpandStr(str)$/;"	f
genutils#ExtractFuncListing	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ExtractFuncListing(funcName, hLines, tLines)$/;"	f
genutils#FindBufferForName	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#FindBufferForName(fileName)$/;"	f
genutils#FindWindowForBuffer	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#FindWindowForBuffer(bufferName, checkUnlisted)$/;"	f
genutils#GetBufNameForAu	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetBufNameForAu(bufName)$/;"	f
genutils#GetColPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetColPosition(id)$/;"	f
genutils#GetLastWinnrInStack	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetLastWinnrInStack(dir)$/;"	f
genutils#GetLinePosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetLinePosition(id)$/;"	f
genutils#GetNextWinnrInStack	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetNextWinnrInStack(dir)$/;"	f
genutils#GetPersistentVar	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetPersistentVar(pluginName, persistentVar, default)$/;"	f
genutils#GetPreviewWinnr	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetPreviewWinnr()$/;"	f
genutils#GetSelectedIndex	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetSelectedIndex()$/;"	f
genutils#GetShellEnvType	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetShellEnvType()$/;"	f
genutils#GetSpacer	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetSpacer(width)$/;"	f
genutils#GetVimCmdOutput	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#GetVimCmdOutput(cmd)$/;"	f
genutils#IsOnlyHorizontalWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#IsOnlyHorizontalWindow()$/;"	f
genutils#IsOnlyVerticalWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#IsOnlyVerticalWindow()$/;"	f
genutils#IsPositionSet	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#IsPositionSet(id)$/;"	f
genutils#MakeArgumentList	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MakeArgumentList(...)$/;"	f
genutils#MakeArgumentString	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MakeArgumentString(...)$/;"	f
genutils#MapAppendCascaded	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MapAppendCascaded(lhs, rhs, mapMode)$/;"	f
genutils#MarkActiveWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MarkActiveWindow()$/;"	f
genutils#MoveCurLineToWinLine	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MoveCurLineToWinLine(n)$/;"	f
genutils#MoveCursorToLastInWinStack	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MoveCursorToLastInWinStack(dir)$/;"	f
genutils#MoveCursorToNextInWinStack	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MoveCursorToNextInWinStack(dir)$/;"	f
genutils#MoveCursorToWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#MoveCursorToWindow(winno)$/;"	f
genutils#NumberOfWindows	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#NumberOfWindows()$/;"	f
genutils#OnMS	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#OnMS()$/;"	f
genutils#OpenWinNoEa	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#OpenWinNoEa(winOpenCmd)$/;"	f
genutils#OptClearBuffer	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#OptClearBuffer()$/;"	f
genutils#PathIsAbsolute	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#PathIsAbsolute(path)$/;"	f
genutils#PathIsFileNameOnly	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#PathIsFileNameOnly(path)$/;"	f
genutils#PromptForElement	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#PromptForElement(array, default, msg, skip, useDialog,$/;"	f
genutils#PutPersistentVar	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#PutPersistentVar(pluginName, persistentVar, value)$/;"	f
genutils#QSort	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#QSort(cmp, direction) range$/;"	f
genutils#QSort2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#QSort2(start, end, cmp, direction, accessor, swapper, context)$/;"	f
genutils#QuoteStr	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#QuoteStr(str)$/;"	f
genutils#RelPathFromDir	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RelPathFromDir(srcDir, tgtFile)$/;"	f
genutils#RelPathFromFile	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RelPathFromFile(srcFile, tgtFile)$/;"	f
genutils#RemoveFromFCShellPre	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RemoveFromFCShellPre(funcName)$/;"	f
genutils#RemoveNotifyWindowClose	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RemoveNotifyWindowClose(windowTitle)$/;"	f
genutils#ResetHardPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ResetHardPosition(id)$/;"	f
genutils#ResetHardPositionWithContext	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ResetHardPositionWithContext(id)$/;"	f
genutils#ResetSoftPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ResetSoftPosition(id)$/;"	f
genutils#ResetWindowSettings	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ResetWindowSettings()$/;"	f
genutils#ResetWindowSettings2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ResetWindowSettings2(id)$/;"	f
genutils#RestoreActiveWindow	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreActiveWindow()$/;"	f
genutils#RestoreHardPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreHardPosition(id)$/;"	f
genutils#RestoreHardPositionWithContext	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreHardPositionWithContext(id)$/;"	f
genutils#RestoreSoftPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreSoftPosition(id)$/;"	f
genutils#RestoreVisualSelection	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreVisualSelection(id)$/;"	f
genutils#RestoreWindowSettings	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreWindowSettings()$/;"	f
genutils#RestoreWindowSettings2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#RestoreWindowSettings2(id)$/;"	f
genutils#Roman2Decimal	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#Roman2Decimal(str)$/;"	f
genutils#SaveHardPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveHardPosition(id)$/;"	f
genutils#SaveHardPositionWithContext	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveHardPositionWithContext(id)$/;"	f
genutils#SaveSoftPosition	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveSoftPosition(id)$/;"	f
genutils#SaveVisualSelection	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveVisualSelection(id)$/;"	f
genutils#SaveWindowSettings	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveWindowSettings()$/;"	f
genutils#SaveWindowSettings2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SaveWindowSettings2(id, overwrite)$/;"	f
genutils#SetupScratchBuffer	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SetupScratchBuffer()$/;"	f
genutils#ShiftWordInSpace	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ShiftWordInSpace(dir)$/;"	f
genutils#ShowLinesWithSyntax	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#ShowLinesWithSyntax() range$/;"	f
genutils#SilentDelete	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SilentDelete(arg1, ...)$/;"	f
genutils#SilentSubstitute	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#SilentSubstitute(pat, cmd)$/;"	f
genutils#UnEscape	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#UnEscape(str, chars)$/;"	f
genutils#UserDirComplete2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#UserDirComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileComplete	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash,$/;"	f
genutils#UserFileComplete2	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#UserFileComplete2(ArgLead, CmdLine, CursorPos, ...)$/;"	f
genutils#UserFileExpand	vimconfig/.vim/autoload/genutils.vim	/^function! genutils#UserFileExpand(fileArgs)$/;"	f
getCurrentText	vimconfig/.vim/autoload/acp.vim	/^function s:getCurrentText()$/;"	f
getCurrentWord	vimconfig/.vim/autoload/acp.vim	/^function s:getCurrentWord()$/;"	f
getMatchingSnipItems	vimconfig/.vim/autoload/acp.vim	/^function s:getMatchingSnipItems(base)$/;"	f
getPath	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getPostText	vimconfig/.vim/autoload/acp.vim	/^function s:getPostText()$/;"	f
getTreeWinNum	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getscript#GetLatestVimScripts	vimconfig/.vim/autoload/getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
handleMiddleMouse	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
hdr	m6x_drv/src/pps.c	/^	tod_hdr_t      hdr;$/;"	m	struct:__anon18	file:
hdr	m6x_drv/src/pps.c	/^	tod_hdr_t      hdr;$/;"	m	struct:__anon19	file:
hex2char	m6x_drv/src/ioctl.c	/^int hex2char(unsigned int *arry, int len)$/;"	f
hexdump	m6x_drv/src/app.c	/^int hexdump(char *name, char *buf, int len)$/;"	f
hexdump	m6x_drv/src/ioctl.c	/^int hexdump(char *name, char *buf, int len)$/;"	f
hexdump	pcie_net_dri.c	/^int hexdump(char *name, char *buf, int len)$/;"	f
hexdump	test_dma/dma_test.c	/^int hexdump(char *name, char *buf, int len)$/;"	f
hw_xmit	m6x_drv/src/eth.c	/^int hw_xmit(unsigned long phy, int len)$/;"	f
hw_xmit	test_dma/dma_test.c	/^int hw_xmit(unsigned long phy, int len)$/;"	f
hwcopy	m6x_drv/src/ioctl.c	/^int hwcopy(unsigned char *dest, unsigned char *src, int len)$/;"	f
hwcopy	pcie_net_dri.c	/^int hwcopy(unsigned char *dest, unsigned char *src, int len)$/;"	f
hwcopy	test_dma/dma_test.c	/^int hwcopy(unsigned char *dest, unsigned char *src, int len)$/;"	f
iaaddr	e100.c	/^		u8 iaaddr[ETH_ALEN];$/;"	m	union:cb::__anon9	file:
ich	e100.c	/^		ich                = (1 << 0),$/;"	e	enum:nic::__anon13	file:
ich	pcie_net_dri.h	/^		ich                = (1 << 0),$/;"	e	enum:pcie_ether_data_t::__anon6
ich_10h_workaround	e100.c	/^		ich_10h_workaround = (1 << 4),$/;"	e	enum:nic::__anon13	file:
ich_10h_workaround	pcie_net_dri.h	/^		ich_10h_workaround = (1 << 4),$/;"	e	enum:pcie_ether_data_t::__anon6
id	m6x_drv/src/ioctl.c	/^	unsigned int id;$/;"	m	struct:__anon23	file:
id	m6x_drv/src/pps.c	/^	unsigned char  id;$/;"	m	struct:__anon17	file:
ifs	e100.c	/^\/*12*\/	u8 X(X(linear_priority_mode:1, pad12:3), ifs:4);$/;"	m	struct:config	file:
in_use	m6x_drv/src/pcie.c	/^	int in_use;$/;"	m	struct:__anon15	file:
in_use	pcie_net_dri.h	/^	int in_use ;$/;"	m	struct:pcie_ether_data_t
in_use	test_dma/dma_test.c	/^	int in_use;$/;"	m	struct:__anon3	file:
indentLevelFor	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
ioctl_timer	m6x_drv/src/ioctl.c	/^struct timer_list ioctl_timer;$/;"	v	typeref:struct:timer_list
ioctl_timer_func	m6x_drv/src/ioctl.c	/^void ioctl_timer_func(unsigned long data)$/;"	f
ioctl_trigger	m6x_drv/src/ioctl.c	/^int ioctl_trigger(void)$/;"	f
ip_addr_hi	e100.c	/^\/*14*\/	u8 ip_addr_hi;$/;"	m	struct:config	file:
ip_addr_lo	e100.c	/^\/*13*\/	u8 ip_addr_lo;$/;"	m	struct:config	file:
irq	m6x_drv/src/pcie.c	/^	int irq;$/;"	m	struct:__anon15	file:
irq	pcie_net_dri.h	/^	int irq ;$/;"	m	struct:pcie_ether_data_t
irq	test_dma/dma_test.c	/^	int irq;$/;"	m	struct:__anon3	file:
irq_en	m6x_drv/src/pcie.c	/^	int irq_en;$/;"	m	struct:__anon15	file:
irq_en	pcie_net_dri.h	/^	int irq_en ;$/;"	m	struct:pcie_ether_data_t
irq_en	test_dma/dma_test.c	/^	int irq_en;$/;"	m	struct:__anon3	file:
irq_line	m6x_drv/src/pcie.c	/^	unsigned char irq_line;$/;"	m	struct:__anon15	file:
irq_line	test_dma/dma_test.c	/^	unsigned char irq_line;$/;"	m	struct:__anon3	file:
irq_mask_all	e100.c	/^	irq_mask_all  = 0x01,$/;"	e	enum:scb_cmd_hi	file:
irq_mask_none	e100.c	/^	irq_mask_none = 0x00,$/;"	e	enum:scb_cmd_hi	file:
irq_num	m6x_drv/src/pcie.c	/^	int irq_num;$/;"	m	struct:__anon15	file:
irq_num	pcie_net_dri.h	/^	int irq_num ;$/;"	m	struct:pcie_ether_data_t
irq_num	test_dma/dma_test.c	/^	int irq_num;$/;"	m	struct:__anon3	file:
irq_pin	m6x_drv/src/pcie.c	/^	unsigned char irq_pin;$/;"	m	struct:__anon15	file:
irq_pin	pcie_net_dri.h	/^	unsigned char irq_pin ;$/;"	m	struct:pcie_ether_data_t
irq_pin	test_dma/dma_test.c	/^	unsigned char irq_pin;$/;"	m	struct:__anon3	file:
irq_ready	pcie_net_dri.h	/^	bool irq_ready ;$/;"	m	struct:pcie_ether_data_t
irq_sw_gen	e100.c	/^	irq_sw_gen    = 0x02,$/;"	e	enum:scb_cmd_hi	file:
isModifiedSinceLastCall	vimconfig/.vim/autoload/acp.vim	/^function s:isModifiedSinceLastCall()$/;"	f
isTreeOpen	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
isdigit	m6x_drv/src/ioctl.c	18;"	d	file:
islower	m6x_drv/src/ioctl.c	19;"	d	file:
isxdigit	m6x_drv/src/ioctl.c	22;"	d	file:
jumpToChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
l	m6x_drv/src/app.c	/^	unsigned int l;$/;"	m	struct:__anon20	file:
l	m6x_drv/src/ioctl.c	/^	unsigned int l;$/;"	m	struct:__anon22	file:
lb_mac	e100.c	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback	file:
lb_mac	pcie_net_dri.h	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback
lb_none	e100.c	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback	file:
lb_none	pcie_net_dri.h	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback
lb_phy	e100.c	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback	file:
lb_phy	pcie_net_dri.h	/^	lb_none = 0, lb_mac = 1, lb_phy = 3,$/;"	e	enum:loopback
leaps	m6x_drv/src/pps.c	/^	unsigned char  leaps;$/;"	m	struct:__anon18	file:
legacy_en	m6x_drv/src/pcie.c	/^	int legacy_en; \/*legacy 遗产*\/$/;"	m	struct:__anon15	file:
legacy_en	pcie_net_dri.h	/^	int legacy_en ;$/;"	m	struct:pcie_ether_data_t
legacy_en	test_dma/dma_test.c	/^	int legacy_en; \/*legacy 遗产*\/$/;"	m	struct:__anon3	file:
len	m6x_drv/src/pps.c	/^	unsigned char  len[2];$/;"	m	struct:__anon17	file:
link	e100.c	/^	__le32 link;$/;"	m	struct:cb	file:
link	e100.c	/^	__le32 link;$/;"	m	struct:rfd	file:
link	pcie_net_dri.h	/^	__le32 link;$/;"	m	struct:rfd
loaded_genutils	vimconfig/.vim/plugin/genutils.vim	/^let loaded_genutils = 205$/;"	v
loaded_hlud	vimconfig/.vim/plugin/hlud.vim	/^let loaded_hlud = 1$/;"	v
loaded_mru	vimconfig/.vim/plugin/mru.vim	/^let loaded_mru=1$/;"	v
loaded_nerd_comments	vimconfig/.vim/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	vimconfig/.vim/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	vimconfig/.vim/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	vimconfig/.vim/plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	vimconfig/.vim/plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	vimconfig/.vim/plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	vimconfig/.vim/plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
lock	m6x_drv/src/ioctl.c	/^spinlock_t lock;$/;"	v
lock	pcie_net_dri.h	/^	spinlock_t lock ;$/;"	m	struct:pcie_ether_data_t
lookupfile#AcceptFile	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#AcceptFile(splitWin, key)$/;"	f
lookupfile#ClearCache	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#ClearCache()$/;"	f
lookupfile#CloseWindow	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#CloseWindow()$/;"	f
lookupfile#Complete	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#Complete(findstart, base)$/;"	f
lookupfile#ExpandCamelCase	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#ExpandCamelCase(str)$/;"	f
lookupfile#IsPopupHidden	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#IsPopupHidden()$/;"	f
lookupfile#LookupFile	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#LookupFile(showingFiller, ...)$/;"	f
lookupfile#OpenWindow	vimconfig/.vim/autoload/lookupfile.vim	/^function! lookupfile#OpenWindow(bang, initPat)$/;"	f
loopback	e100.c	/^	   loopback:2);$/;"	m	struct:config	file:
loopback	e100.c	/^	enum loopback loopback;$/;"	m	struct:nic	typeref:enum:nic::loopback	file:
loopback	e100.c	/^enum loopback {$/;"	g	file:
loopback	pcie_net_dri.h	/^	enum loopback loopback;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::loopback
loopback	pcie_net_dri.h	/^enum loopback {$/;"	g
m6x_buffer_get	m6x_drv/src/ioctl.c	/^int m6x_buffer_get(unsigned char *buf, int *len)$/;"	f
m6x_buffer_init	m6x_drv/src/ioctl.c	/^int m6x_buffer_init(void)$/;"	f
m6x_buffer_len	m6x_drv/src/ioctl.c	/^int m6x_buffer_len(void)$/;"	f
m6x_buffer_put	m6x_drv/src/ioctl.c	/^int m6x_buffer_put(unsigned char *buf, int len)$/;"	f
m6x_close	pcie_net_dri.c	/^static int m6x_close(struct net_device *netdev)$/;"	f	file:
m6x_free	pcie_net_dri.c	/^static void m6x_free(pcie_ether_ptp_m6x_pri_data_t* priv)$/;"	f	file:
m6x_hw_tx	pcie_net_dri.c	/^int m6x_hw_tx(char *data, int len, struct net_device *netdev)$/;"	f
m6x_ioctl_exit	m6x_drv/src/ioctl.c	/^void m6x_ioctl_exit(void)$/;"	f
m6x_ioctl_init	m6x_drv/src/ioctl.c	/^int m6x_ioctl_init(void)$/;"	f
m6x_mreg_write	m6x_drv/src/pcie.c	/^int m6x_mreg_write(unsigned int reg, unsigned char *buf, int len)$/;"	f
m6x_netdev_ops	pcie_net_dri.c	/^static const struct net_device_ops m6x_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
m6x_open	pcie_net_dri.c	/^static int m6x_open(struct net_device *netdev)$/;"	f	file:
m6x_pcie_dev_init_ops	pcie_net_dri.c	/^static int m6x_pcie_dev_init_ops(pcie_ether_ptp_m6x_pri_data_t * m6x_net_pri_data_p)$/;"	f	file:
m6x_pcie_device	m6x_drv/src/pcie.c	/^m6x_pcie_t *m6x_pcie_device = NULL;$/;"	v
m6x_pcie_device	test_dma/dma_test.c	/^m6x_pcie_t *m6x_pcie_device = NULL;$/;"	v
m6x_pcie_driver	m6x_drv/src/pcie.c	/^static struct pci_driver m6x_pcie_driver = {$/;"	v	typeref:struct:pci_driver	file:
m6x_pcie_driver	test_dma/dma_test.c	/^static struct pci_driver m6x_pcie_driver = {$/;"	v	typeref:struct:pci_driver	file:
m6x_pcie_exit	m6x_drv/src/pcie.c	/^module_exit(m6x_pcie_exit);$/;"	v
m6x_pcie_exit	m6x_drv/src/pcie.c	/^static void __exit m6x_pcie_exit(void)$/;"	f	file:
m6x_pcie_init	m6x_drv/src/pcie.c	/^module_init(m6x_pcie_init);$/;"	v
m6x_pcie_init	m6x_drv/src/pcie.c	/^static int __init m6x_pcie_init(void)$/;"	f	file:
m6x_pcie_legacy_irq	m6x_drv/src/pcie.c	/^int m6x_pcie_legacy_irq(int irq, void *arg)$/;"	f
m6x_pcie_legacy_irq	pcie_net_dri.c	/^int m6x_pcie_legacy_irq(int irq, void *arg)$/;"	f
m6x_pcie_msi_irq	m6x_drv/src/pcie.c	/^int m6x_pcie_msi_irq(int irq, void *arg)$/;"	f
m6x_pcie_msi_irq	pcie_net_dri.c	/^int m6x_pcie_msi_irq(int irq, void *arg)$/;"	f
m6x_pcie_msi_irq	test_dma/dma_test.c	/^int m6x_pcie_msi_irq(int irq, void *arg)$/;"	f
m6x_pcie_msi_receive_irq	pcie_net_dri.c	/^static irqreturn_t m6x_pcie_msi_receive_irq( int irq, void *args)$/;"	f	file:
m6x_pcie_msi_receive_start_irq	pcie_net_dri.c	/^static irqreturn_t m6x_pcie_msi_receive_start_irq( int irq, void *args)$/;"	f	file:
m6x_pcie_msi_send_comple_irq	pcie_net_dri.c	/^static irqreturn_t m6x_pcie_msi_send_comple_irq( int irq, void *args)$/;"	f	file:
m6x_pcie_probe	m6x_drv/src/pcie.c	/^static int m6x_pcie_probe(struct pci_dev *dev,$/;"	f	file:
m6x_pcie_probe	test_dma/dma_test.c	/^static int m6x_pcie_probe(struct pci_dev *dev,$/;"	f	file:
m6x_pcie_remove	m6x_drv/src/pcie.c	/^static void m6x_pcie_remove(struct pci_dev *dev)$/;"	f	file:
m6x_pcie_remove	test_dma/dma_test.c	/^static void m6x_pcie_remove(struct pci_dev *dev)$/;"	f	file:
m6x_pcie_t	m6x_drv/src/pcie.c	/^} m6x_pcie_t;$/;"	t	typeref:struct:__anon15	file:
m6x_pcie_t	test_dma/dma_test.c	/^} m6x_pcie_t;$/;"	t	typeref:struct:__anon3	file:
m6x_pcie_tbl	m6x_drv/src/pcie.c	/^static struct pci_device_id m6x_pcie_tbl[] = {$/;"	v	typeref:struct:pci_device_id	file:
m6x_pcie_tbl	test_dma/dma_test.c	/^static struct pci_device_id m6x_pcie_tbl[] = {$/;"	v	typeref:struct:pci_device_id	file:
m6x_pps_16ns	m6x_drv/src/pps.c	/^int m6x_pps_16ns(int value)$/;"	f
m6x_pps_1us	m6x_drv/src/pps.c	/^int m6x_pps_1us(int value)$/;"	f
m6x_pps_buffer	m6x_drv/src/pps.c	/^char m6x_pps_buffer[2][0x84];$/;"	v
m6x_pps_en	m6x_drv/src/pps.c	/^int m6x_pps_en(int value)$/;"	f
m6x_pps_init	m6x_drv/src/pps.c	/^int m6x_pps_init(void)$/;"	f
m6x_pps_interrupt	m6x_drv/src/pps.c	/^int m6x_pps_interrupt(void)$/;"	f
m6x_pps_interrupt_buffer	m6x_drv/src/pps.c	/^unsigned char m6x_pps_interrupt_buffer[1024];$/;"	v
m6x_pps_tod_get	m6x_drv/src/pps.c	/^int m6x_pps_tod_get(int id, unsigned char *report, int *len)$/;"	f
m6x_pri_data	pcie_net_dri.c	/^pcie_ether_ptp_m6x_pri_data_t *m6x_pri_data = NULL ;$/;"	v
m6x_reg_bit_clr	m6x_drv/src/pcie.c	/^int m6x_reg_bit_clr(unsigned int reg, int bit)$/;"	f
m6x_reg_bit_clr	test_dma/dma_test.c	/^int m6x_reg_bit_clr(unsigned int reg, int bit)$/;"	f
m6x_reg_bit_set	m6x_drv/src/pcie.c	/^int m6x_reg_bit_set(unsigned int reg, int bit)$/;"	f
m6x_reg_bit_set	pcie_net_dri.c	/^int m6x_reg_bit_set(unsigned int reg, int bit)$/;"	f
m6x_reg_bit_set	test_dma/dma_test.c	/^int m6x_reg_bit_set(unsigned int reg, int bit)$/;"	f
m6x_reg_read	m6x_drv/src/pcie.c	/^int m6x_reg_read(unsigned int reg, unsigned int *value)$/;"	f
m6x_reg_read	test_dma/dma_test.c	/^int m6x_reg_read(unsigned int reg, unsigned int *value)$/;"	f
m6x_reg_write	m6x_drv/src/pcie.c	/^int m6x_reg_write(unsigned int reg, unsigned int value)$/;"	f
m6x_reg_write	pcie_net_dri.c	/^int m6x_reg_write(unsigned int reg, unsigned int value)$/;"	f
m6x_reg_write	test_dma/dma_test.c	/^int m6x_reg_write(unsigned int reg, unsigned int value)$/;"	f
m6x_regs_dump	m6x_drv/src/pcie.c	/^int m6x_regs_dump(void)$/;"	f
m6x_start_xmit	pcie_net_dri.c	/^int m6x_start_xmit(struct sk_buff *skb, struct net_device *netdev)$/;"	f
m6x_tod_buffer	m6x_drv/src/pps.c	/^char m6x_tod_buffer[5][254];$/;"	v
m6x_tod_display	m6x_drv/src/pps.c	/^int m6x_tod_display = 1;$/;"	v
m6x_tod_display_set	m6x_drv/src/pps.c	/^int m6x_tod_display_set(int en)$/;"	f
m6x_tx_timeout	pcie_net_dri.c	/^static void m6x_tx_timeout(struct net_device *netdev)$/;"	f	file:
m6x_uart_init	m6x_drv/src/uart.c	/^int m6x_uart_init(void)$/;"	f
m6x_uart_reset	m6x_drv/src/uart.c	/^int m6x_uart_reset(void)$/;"	f
m6x_uart_rx_test	m6x_drv/src/uart.c	/^int m6x_uart_rx_test(void)$/;"	f
m6x_uart_rx_work	m6x_drv/src/uart.c	/^int m6x_uart_rx_work(void)$/;"	f
m6x_uart_rx_work__	m6x_drv/src/uart.c	/^int m6x_uart_rx_work__(void)$/;"	f
m6x_uart_tx	m6x_drv/src/uart.c	/^int m6x_uart_tx(unsigned char *buf, int len, int timeout)$/;"	f
m6x_uart_tx_test	m6x_drv/src/uart.c	/^int m6x_uart_tx_test(unsigned char *str, int len)$/;"	f
mac	e100.c	/^	enum mac mac;$/;"	m	struct:nic	typeref:enum:nic::mac	file:
mac	e100.c	/^enum mac {$/;"	g	file:
mac	pcie_net_dri.h	/^	enum mac mac;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::mac
mac	pcie_net_dri.h	/^enum mac {$/;"	g
mac_82550_D102	e100.c	/^	mac_82550_D102    = 12,$/;"	e	enum:mac	file:
mac_82550_D102	pcie_net_dri.h	/^	mac_82550_D102    = 12,$/;"	e	enum:mac
mac_82550_D102_C	e100.c	/^	mac_82550_D102_C  = 13,$/;"	e	enum:mac	file:
mac_82550_D102_C	pcie_net_dri.h	/^	mac_82550_D102_C  = 13,$/;"	e	enum:mac
mac_82551_10	e100.c	/^	mac_82551_10      = 16,$/;"	e	enum:mac	file:
mac_82551_10	pcie_net_dri.h	/^	mac_82551_10      = 16,$/;"	e	enum:mac
mac_82551_E	e100.c	/^	mac_82551_E       = 14,$/;"	e	enum:mac	file:
mac_82551_E	pcie_net_dri.h	/^	mac_82551_E       = 14,$/;"	e	enum:mac
mac_82551_F	e100.c	/^	mac_82551_F       = 15,$/;"	e	enum:mac	file:
mac_82551_F	pcie_net_dri.h	/^	mac_82551_F       = 15,$/;"	e	enum:mac
mac_82557_D100_A	e100.c	/^	mac_82557_D100_A  = 0,$/;"	e	enum:mac	file:
mac_82557_D100_A	pcie_net_dri.h	/^	mac_82557_D100_A  = 0,$/;"	e	enum:mac
mac_82557_D100_B	e100.c	/^	mac_82557_D100_B  = 1,$/;"	e	enum:mac	file:
mac_82557_D100_B	pcie_net_dri.h	/^	mac_82557_D100_B  = 1,$/;"	e	enum:mac
mac_82557_D100_C	e100.c	/^	mac_82557_D100_C  = 2,$/;"	e	enum:mac	file:
mac_82557_D100_C	pcie_net_dri.h	/^	mac_82557_D100_C  = 2,$/;"	e	enum:mac
mac_82558_D101_A4	e100.c	/^	mac_82558_D101_A4 = 4,$/;"	e	enum:mac	file:
mac_82558_D101_A4	pcie_net_dri.h	/^	mac_82558_D101_A4 = 4,$/;"	e	enum:mac
mac_82558_D101_B0	e100.c	/^	mac_82558_D101_B0 = 5,$/;"	e	enum:mac	file:
mac_82558_D101_B0	pcie_net_dri.h	/^	mac_82558_D101_B0 = 5,$/;"	e	enum:mac
mac_82559_D101M	e100.c	/^	mac_82559_D101M   = 8,$/;"	e	enum:mac	file:
mac_82559_D101M	pcie_net_dri.h	/^	mac_82559_D101M   = 8,$/;"	e	enum:mac
mac_82559_D101S	e100.c	/^	mac_82559_D101S   = 9,$/;"	e	enum:mac	file:
mac_82559_D101S	pcie_net_dri.h	/^	mac_82559_D101S   = 9,$/;"	e	enum:mac
mac_unknown	e100.c	/^	mac_unknown       = 0xFF,$/;"	e	enum:mac	file:
mac_unknown	pcie_net_dri.h	/^	mac_unknown       = 0xFF,$/;"	e	enum:mac
main	m6x_drv/src/app.c	/^int main(int argc, char *argv[])$/;"	f
main_buffer	m6x_drv/src/app.c	/^unsigned char main_buffer[4096];$/;"	v
major	m6x_drv/src/ioctl.c	/^	int major;$/;"	m	struct:__anon21	file:
makeCurrentBehaviorSet	vimconfig/.vim/autoload/acp.vim	/^function s:makeCurrentBehaviorSet()$/;"	f
makeDefaultBehavior	vimconfig/.vim/plugin/acp.vim	/^function s:makeDefaultBehavior()$/;"	f
makeSnipmateItem	vimconfig/.vim/autoload/acp.vim	/^function s:makeSnipmateItem(key, snip)$/;"	f
map	vimconfig/.vim/plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	vimconfig/.vim/plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
mapForMappingDriven	vimconfig/.vim/autoload/acp.vim	/^function s:mapForMappingDriven()$/;"	f
max	e100.c	/^	u32 max;$/;"	m	struct:param_range	file:
max	pcie_net_dri.h	/^	u32 max;$/;"	m	struct:param_range
mcmatch_wake	e100.c	/^	   link_status_wake:1), arp_wake:1), mcmatch_wake:1);$/;"	m	struct:config	file:
mdi_ctrl	e100.c	/^	u32 mdi_ctrl;$/;"	m	struct:csr	file:
mdi_ctrl	e100.c	/^enum mdi_ctrl {$/;"	g	file:
mdi_read	e100.c	/^	mdi_read  = 0x08000000,$/;"	e	enum:mdi_ctrl	file:
mdi_ready	e100.c	/^	mdi_ready = 0x10000000,$/;"	e	enum:mdi_ctrl	file:
mdi_write	e100.c	/^	mdi_write = 0x04000000,$/;"	e	enum:mdi_ctrl	file:
mdio_ctrl	e100.c	/^	u16 (*mdio_ctrl)(struct nic *nic, u32 addr, u32 dir, u32 reg, u16 data);$/;"	m	struct:nic	file:
mdio_ctrl	pcie_net_dri.h	/^	u16 (*mdio_ctrl)( struct pcie_ether_data_t *m6x_net_pri_data_p, u32 addr, u32 dir, u32 reg, u16 data);$/;"	m	struct:pcie_ether_data_t
mdio_ctrl_hw	e100.c	/^static u16 mdio_ctrl_hw(struct nic *nic, u32 addr, u32 dir, u32 reg, u16 data)$/;"	f	file:
mdio_ctrl_phy_82552_v	e100.c	/^static u16 mdio_ctrl_phy_82552_v(struct nic *nic,$/;"	f	file:
mdio_ctrl_phy_mii_emulated	e100.c	/^static u16 mdio_ctrl_phy_mii_emulated(struct nic *nic,$/;"	f	file:
mdio_lock	e100.c	/^	spinlock_t mdio_lock;$/;"	m	struct:nic	file:
mdio_lock	pcie_net_dri.h	/^	spinlock_t mdio_lock;$/;"	m	struct:pcie_ether_data_t
mdio_read	e100.c	/^static int mdio_read(struct net_device *netdev, int addr, int reg)$/;"	f	file:
mdio_write	e100.c	/^static void mdio_write(struct net_device *netdev, int addr, int reg, int data)$/;"	f	file:
mem	e100.c	/^	struct mem *mem;$/;"	m	struct:nic	typeref:struct:nic::mem	file:
mem	e100.c	/^struct mem {$/;"	s	file:
mem	m6x_drv/src/pcie.c	/^	unsigned char *mem;$/;"	m	struct:__anon14	file:
mem	pcie_net_dri.h	/^	struct mem *mem;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::mem
mem	pcie_net_dri.h	/^	unsigned char *mem ;$/;"	m	struct:__anon5
mem	pcie_net_dri.h	/^struct mem {$/;"	s
mem	test_dma/dma_test.c	/^	unsigned char *mem;$/;"	m	struct:__anon2	file:
menuRoot	vimconfig/.vim/plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	vimconfig/.vim/plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	vimconfig/.vim/plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	vimconfig/.vim/plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
mii	e100.c	/^	struct mii_if_info mii;$/;"	m	struct:nic	typeref:struct:nic::mii_if_info	file:
mii	pcie_net_dri.h	/^	struct mii_if_info mii;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::mii_if_info
min	e100.c	/^	u32 min;$/;"	m	struct:param_range	file:
min	pcie_net_dri.h	/^	u32 min;$/;"	m	struct:param_range
mmio_end	m6x_drv/src/pcie.c	/^	resource_size_t mmio_end;$/;"	m	struct:__anon14	file:
mmio_end	pcie_net_dri.h	/^	resource_size_t mmio_end ;$/;"	m	struct:__anon5
mmio_end	test_dma/dma_test.c	/^	resource_size_t mmio_end;$/;"	m	struct:__anon2	file:
mmio_flags	m6x_drv/src/pcie.c	/^	unsigned long mmio_flags;$/;"	m	struct:__anon14	file:
mmio_flags	pcie_net_dri.h	/^	unsigned long mmio_flags ;$/;"	m	struct:__anon5
mmio_flags	test_dma/dma_test.c	/^	unsigned long mmio_flags;$/;"	m	struct:__anon2	file:
mmio_len	m6x_drv/src/pcie.c	/^	resource_size_t mmio_len;$/;"	m	struct:__anon14	file:
mmio_len	pcie_net_dri.h	/^	resource_size_t mmio_len ;$/;"	m	struct:__anon5
mmio_len	test_dma/dma_test.c	/^	resource_size_t mmio_len;$/;"	m	struct:__anon2	file:
mmio_start	m6x_drv/src/pcie.c	/^	resource_size_t mmio_start;$/;"	m	struct:__anon14	file:
mmio_start	pcie_net_dri.h	/^	resource_size_t mmio_start ;$/;"	m	struct:__anon5
mmio_start	test_dma/dma_test.c	/^	resource_size_t mmio_start;$/;"	m	struct:__anon2	file:
monitor	m6x_drv/src/pps.c	/^	unsigned short monitor;$/;"	m	struct:__anon19	file:
msi_en	m6x_drv/src/pcie.c	/^	int msi_en;$/;"	m	struct:__anon15	file:
msi_en	pcie_net_dri.h	/^	int msi_en ;$/;"	m	struct:pcie_ether_data_t
msi_en	test_dma/dma_test.c	/^	int msi_en;$/;"	m	struct:__anon3	file:
msix	m6x_drv/src/pcie.c	/^	struct msix_entry msix[100];$/;"	m	struct:__anon15	typeref:struct:__anon15::msix_entry	file:
msix	pcie_net_dri.h	/^	struct msix_entry msix[100] ;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::msix_entry
msix	test_dma/dma_test.c	/^	struct msix_entry msix[100];$/;"	m	struct:__anon3	typeref:struct:__anon3::msix_entry	file:
msix_en	m6x_drv/src/pcie.c	/^	int msix_en;$/;"	m	struct:__anon15	file:
msix_en	pcie_net_dri.h	/^	int msix_en ;$/;"	m	struct:pcie_ether_data_t
msix_en	test_dma/dma_test.c	/^	int msix_en;$/;"	m	struct:__anon3	file:
multi	e100.c	/^		struct multi multi;$/;"	m	union:cb::__anon9	typeref:struct:cb::__anon9::multi	file:
multi	e100.c	/^struct multi {$/;"	s	file:
multi_ia	e100.c	/^\/*20*\/	u8 X(X(X(pad20_1:5, fc_priority_location:1), multi_ia:1), pad20_2:1);$/;"	m	struct:config	file:
multicast_all	e100.c	/^		multicast_all      = (1 << 2),$/;"	e	enum:nic::__anon13	file:
multicast_all	pcie_net_dri.h	/^		multicast_all      = (1 << 2),$/;"	e	enum:pcie_ether_data_t::__anon6
myclass	m6x_drv/src/ioctl.c	/^	struct class *myclass;$/;"	m	struct:__anon21	typeref:struct:__anon21::class	file:
mydev	m6x_drv/src/ioctl.c	/^	struct device *mydev;$/;"	m	struct:__anon21	typeref:struct:__anon21::device	file:
name	m6x_drv/src/ioctl.c	/^	char *name;$/;"	m	struct:__anon23	file:
napi	e100.c	/^	struct napi_struct napi;$/;"	m	struct:nic	typeref:struct:nic::napi_struct	file:
napi	pcie_net_dri.h	/^	struct napi_struct napi;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::napi_struct
netdev	e100.c	/^	struct net_device *netdev;$/;"	m	struct:nic	typeref:struct:nic::net_device	file:
netdev	pcie_net_dri.h	/^	struct net_device *netdev;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::net_device
next	e100.c	/^	struct cb *next, *prev;$/;"	m	struct:cb	typeref:struct:cb::cb	file:
next	e100.c	/^	struct rx *next, *prev;$/;"	m	struct:rx	typeref:struct:rx::rx	file:
nextBufferName	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
nic	e100.c	/^struct nic {$/;"	s	file:
obj-m	Makefile	/^    obj-m := pcie_net_dri.o$/;"	m
obj-m	m6x_drv/src/Makefile	/^obj-m     := $(MODULE_NAME).o$/;"	m
obj-m	test_dma/Makefile	/^obj-m     := $(MODULE_NAME).o$/;"	m
omni#common#debug#End	vimconfig/.vim/autoload/omni/common/debug.vim	/^function! omni#common#debug#End()$/;"	f
omni#common#debug#Start	vimconfig/.vim/autoload/omni/common/debug.vim	/^function! omni#common#debug#Start()$/;"	f
omni#common#debug#Trace	vimconfig/.vim/autoload/omni/common/debug.vim	/^function! omni#common#debug#Trace(szFuncName, ...)$/;"	f
omni#common#utils#CompareNumber	vimconfig/.vim/autoload/omni/common/utils.vim	/^function! omni#common#utils#CompareNumber(i1, i2)$/;"	f
omni#common#utils#GetWordUnderCursor	vimconfig/.vim/autoload/omni/common/utils.vim	/^function! omni#common#utils#GetWordUnderCursor()$/;"	f
omni#common#utils#TagList	vimconfig/.vim/autoload/omni/common/utils.vim	/^function! omni#common#utils#TagList(szTagQuery)$/;"	f
omni#common#utils#TagListNoThrow	vimconfig/.vim/autoload/omni/common/utils.vim	/^function! omni#common#utils#TagListNoThrow(szTagQuery)$/;"	f
omni#cpp#complete#Init	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! omni#cpp#complete#Init()$/;"	f
omni#cpp#complete#Main	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^function! omni#cpp#complete#Main(findstart, base)$/;"	f
omni#cpp#includes#Display	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^function! omni#cpp#includes#Display()$/;"	f
omni#cpp#includes#GetList	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^function! omni#cpp#includes#GetList(...)$/;"	f
omni#cpp#items#Get	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! omni#cpp#items#Get(tokens, ...)$/;"	f
omni#cpp#items#ResolveItemsTypeInfo	vimconfig/.vim/autoload/omni/cpp/items.vim	/^function! omni#cpp#items#ResolveItemsTypeInfo(contextStack, items)$/;"	f
omni#cpp#maycomplete#Arrow	vimconfig/.vim/autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Arrow()$/;"	f
omni#cpp#maycomplete#Complete	vimconfig/.vim/autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Complete()$/;"	f
omni#cpp#maycomplete#Dot	vimconfig/.vim/autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Dot()$/;"	f
omni#cpp#maycomplete#Scope	vimconfig/.vim/autoload/omni/cpp/maycomplete.vim	/^function! omni#cpp#maycomplete#Scope()$/;"	f
omni#cpp#namespaces#GetContexts	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetContexts()$/;"	f
omni#cpp#namespaces#GetListFromCurrentBuffer	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetListFromCurrentBuffer(...)$/;"	f
omni#cpp#namespaces#GetMapFromBuffer	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromBuffer(szFilePath, ...)$/;"	f
omni#cpp#namespaces#GetMapFromCurrentBuffer	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromCurrentBuffer()$/;"	f
omni#cpp#namespaces#GetUsingNamespaces	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#GetUsingNamespaces()$/;"	f
omni#cpp#namespaces#ResolveAlias	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#ResolveAlias(mapNamespaceAlias, szNamespace)$/;"	f
omni#cpp#namespaces#ResolveAll	vimconfig/.vim/autoload/omni/cpp/namespaces.vim	/^function! omni#cpp#namespaces#ResolveAll(namespacesUsed)$/;"	f
omni#cpp#settings#Init	vimconfig/.vim/autoload/omni/cpp/settings.vim	/^function! omni#cpp#settings#Init()$/;"	f
omni#cpp#tokenizer#Tokenize	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^function! omni#cpp#tokenizer#Tokenize(szCode)$/;"	f
omni#cpp#utils#BuildParenthesisGroups	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#BuildParenthesisGroups(tokens)$/;"	f
omni#cpp#utils#CreateTypeInfo	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#CreateTypeInfo(param)$/;"	f
omni#cpp#utils#ExtractCmdFromTagItem	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractCmdFromTagItem(tagItem)$/;"	f
omni#cpp#utils#ExtractScope	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractScope(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTag	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTag(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTokens	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTokens(tokens)$/;"	f
omni#cpp#utils#GetCastType	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCastType(tokens)$/;"	f
omni#cpp#utils#GetClassInheritanceList	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetClassInheritanceList(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetCode	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCode(posStart, posEnd)$/;"	f
omni#cpp#utils#GetCodeFromLine	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetCodeFromLine(szSingleLine)$/;"	f
omni#cpp#utils#GetPreviewWindowStringFromTagItem	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetPreviewWindowStringFromTagItem(tagItem)$/;"	f
omni#cpp#utils#GetResolvedTagItem	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetResolvedTagItem(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetResolvedTags	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetResolvedTags(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetTypeInfoString	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#GetTypeInfoString(typeInfo)$/;"	f
omni#cpp#utils#IsCursorInCommentOrString	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#IsCursorInCommentOrString()$/;"	f
omni#cpp#utils#IsTypeInfoValid	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#IsTypeInfoValid(typeInfo)$/;"	f
omni#cpp#utils#ResolveFilePath	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#ResolveFilePath(szFile)$/;"	f
omni#cpp#utils#SimplifyParenthesis	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#SimplifyParenthesis(tokens)$/;"	f
omni#cpp#utils#SimplifyScope	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#SimplifyScope(szScope)$/;"	f
omni#cpp#utils#TokenizeCurrentInstruction	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstruction(...)$/;"	f
omni#cpp#utils#TokenizeCurrentInstructionUntilWord	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstructionUntilWord()$/;"	f
omni#cpp#utils#expIgnoreComments	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#expIgnoreComments = 'getline(".") =~ g:omni#cpp#utils#reIgnoreComment'$/;"	v
omni#cpp#utils#reIgnoreComment	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#reIgnoreComment = escape('\\\/\\\/\\|\\\/\\*\\|\\*\\\/', '*\/\\')$/;"	v
omni#cpp#utils#szEscapedCharacters	vimconfig/.vim/autoload/omni/cpp/utils.vim	/^let omni#cpp#utils#szEscapedCharacters = ' %#'$/;"	v
op_ewds	e100.c	/^	op_ewds  = 0x10,$/;"	e	enum:eeprom_op	file:
op_ewen	e100.c	/^	op_ewen  = 0x13,$/;"	e	enum:eeprom_op	file:
op_read	e100.c	/^	op_read  = 0x06,$/;"	e	enum:eeprom_op	file:
op_write	e100.c	/^	op_write = 0x05,$/;"	e	enum:eeprom_op	file:
openBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
pad1	e100.c	/^\/*1*\/	u8 X(X(rx_fifo_limit:4, tx_fifo_limit:3), pad1:1);$/;"	m	struct:config	file:
pad15_2	e100.c	/^	   pad15_2:1), crs_or_cdt:1);$/;"	m	struct:config	file:
pad18	e100.c	/^	   rx_long_ok:1), fc_priority_threshold:3), pad18:1);$/;"	m	struct:config	file:
pad20_2	e100.c	/^\/*20*\/	u8 X(X(X(pad20_1:5, fc_priority_location:1), multi_ia:1), pad20_2:1);$/;"	m	struct:config	file:
pad21_2	e100.c	/^\/*21*\/	u8 X(X(pad21_1:3, multicast_all:1), pad21_2:4);$/;"	m	struct:config	file:
pad22	e100.c	/^\/*22*\/	u8 X(X(rx_d102_mode:1, rx_vlan_drop:1), pad22:6);$/;"	m	struct:config	file:
pad3	e100.c	/^	   term_write_cache_line:1), pad3:4);$/;"	m	struct:config	file:
pad_d102	e100.c	/^	u8 pad_d102[9];$/;"	m	struct:config	file:
param_range	e100.c	/^struct param_range {$/;"	s	file:
param_range	pcie_net_dri.h	/^struct param_range {$/;"	s
params	e100.c	/^	struct params params;$/;"	m	struct:nic	typeref:struct:nic::params	file:
params	e100.c	/^struct params {$/;"	s	file:
params	pcie_net_dri.h	/^	struct params params;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::params
params	pcie_net_dri.h	/^struct params {$/;"	s
pcie_bar_read	m6x_drv/src/pcie.c	/^int pcie_bar_read(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_bar_read	pcie_net_dri.c	/^int pcie_bar_read(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_bar_read	test_dma/dma_test.c	/^int pcie_bar_read(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_bar_vmem	m6x_drv/src/pcie.c	/^char *pcie_bar_vmem(int bar)$/;"	f
pcie_bar_write	m6x_drv/src/pcie.c	/^int pcie_bar_write(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_bar_write	pcie_net_dri.c	/^int pcie_bar_write(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_bar_write	test_dma/dma_test.c	/^int pcie_bar_write(int bar, int offset, unsigned char *buf, int len)$/;"	f
pcie_config_read	m6x_drv/src/pcie.c	/^int pcie_config_read(int offset, char *buf, int len)$/;"	f
pcie_config_write	m6x_drv/src/pcie.c	/^int pcie_config_write(int offset, char *buf, int len)$/;"	f
pcie_debug	pcie_net_dri.c	/^unsigned int pcie_debug = 0b11111111 ;$/;"	v
pcie_ether_data_t	pcie_net_dri.h	/^typedef struct pcie_ether_data_t$/;"	s
pcie_ether_ptp_m6x_pri_data_t	pcie_net_dri.h	/^} pcie_ether_ptp_m6x_pri_data_t ;$/;"	t	typeref:struct:pcie_ether_data_t
pcie_net_driver	pcie_net_dri.c	/^static struct pci_driver pcie_net_driver = {$/;"	v	typeref:struct:pci_driver	file:
pcie_net_exit	pcie_net_dri.c	/^module_exit(pcie_net_exit);$/;"	v
pcie_net_exit	pcie_net_dri.c	/^static void __exit pcie_net_exit(void)$/;"	f	file:
pcie_net_init	pcie_net_dri.c	/^module_init(pcie_net_init);$/;"	v
pcie_net_init	pcie_net_dri.c	/^static int __init pcie_net_init(void)$/;"	f	file:
pcie_net_probe	pcie_net_dri.c	/^static int pcie_net_probe(struct pci_dev *pdev,$/;"	f	file:
pcie_net_remove	pcie_net_dri.c	/^static void pcie_net_remove(struct pci_dev *dev)$/;"	f	file:
pcie_net_tbl	pcie_net_dri.c	/^static struct pci_device_id pcie_net_tbl[] = {$/;"	v	typeref:struct:pci_device_id	file:
pdev	e100.c	/^	struct pci_dev *pdev;$/;"	m	struct:nic	typeref:struct:nic::pci_dev	file:
pdev	pcie_net_dri.h	/^	struct pci_dev *pdev;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::pci_dev
phy	e100.c	/^	enum phy phy;$/;"	m	struct:nic	typeref:enum:nic::phy	file:
phy	e100.c	/^enum phy {$/;"	g	file:
phy	m6x_drv/src/m6x_api.h	/^	unsigned long phy;$/;"	m	struct:__anon16
phy	pcie_net_dri.h	/^	enum phy phy;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::phy
phy	pcie_net_dri.h	/^	unsigned long phy;$/;"	m	struct:__anon4
phy	pcie_net_dri.h	/^enum phy {$/;"	g
phy	test_dma/m6x_api.h	/^	unsigned long phy;$/;"	m	struct:__anon1
phy_100a	e100.c	/^	phy_100a     = 0x000003E0,$/;"	e	enum:phy	file:
phy_100a	pcie_net_dri.h	/^	phy_100a     = 0x000003E0,$/;"	e	enum:phy
phy_100c	e100.c	/^	phy_100c     = 0x035002A8,$/;"	e	enum:phy	file:
phy_100c	pcie_net_dri.h	/^	phy_100c     = 0x035002A8,$/;"	e	enum:phy
phy_82552_v	e100.c	/^	phy_82552_v  = 0xd061004d,$/;"	e	enum:phy	file:
phy_82552_v	pcie_net_dri.h	/^	phy_82552_v  = 0xd061004d,$/;"	e	enum:phy
phy_82555_tx	e100.c	/^	phy_82555_tx = 0x015002A8,$/;"	e	enum:phy	file:
phy_82555_tx	pcie_net_dri.h	/^	phy_82555_tx = 0x015002A8,$/;"	e	enum:phy
phy_82562_eh	e100.c	/^	phy_82562_eh = 0x017002A8,$/;"	e	enum:phy	file:
phy_82562_eh	pcie_net_dri.h	/^	phy_82562_eh = 0x017002A8,$/;"	e	enum:phy
phy_82562_ek	e100.c	/^	phy_82562_ek = 0x031002A8,$/;"	e	enum:phy	file:
phy_82562_ek	pcie_net_dri.h	/^	phy_82562_ek = 0x031002A8,$/;"	e	enum:phy
phy_82562_em	e100.c	/^	phy_82562_em = 0x032002A8,$/;"	e	enum:phy	file:
phy_82562_em	pcie_net_dri.h	/^	phy_82562_em = 0x032002A8,$/;"	e	enum:phy
phy_82562_et	e100.c	/^	phy_82562_et = 0x033002A8,$/;"	e	enum:phy	file:
phy_82562_et	pcie_net_dri.h	/^	phy_82562_et = 0x033002A8,$/;"	e	enum:phy
phy_nsc_tx	e100.c	/^	phy_nsc_tx   = 0x5C002000,$/;"	e	enum:phy	file:
phy_nsc_tx	pcie_net_dri.h	/^	phy_nsc_tx   = 0x5C002000,$/;"	e	enum:phy
phy_poll	pcie_net_dri.h	/^	struct delayed_work phy_poll ;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::delayed_work
phy_unknown	e100.c	/^	phy_unknown  = 0xFFFFFFFF,$/;"	e	enum:phy	file:
phy_unknown	pcie_net_dri.h	/^	phy_unknown  = 0xFFFFFFFF,$/;"	e	enum:phy
port	e100.c	/^	u32 port;$/;"	m	struct:csr	file:
port	e100.c	/^enum port {$/;"	g	file:
pps_polling	m6x_drv/src/pps.c	/^int pps_polling(int ms)$/;"	f
pps_pretimer_set	m6x_drv/src/pps.c	/^int pps_pretimer_set(int ms)$/;"	f
pps_tod_to_time	m6x_drv/src/pps.c	/^int pps_tod_to_time(unsigned char *str, struct rtc_time *tm)$/;"	f
pr_fmt	e100.c	150;"	d	file:
preamble_length	e100.c	/^\/*10*\/	u8 X(X(X(pad10:3, no_source_addr_insertion:1), preamble_length:2),$/;"	m	struct:config	file:
prev	e100.c	/^	struct cb *next, *prev;$/;"	m	struct:cb	typeref:struct:cb::	file:
prev	e100.c	/^	struct rx *next, *prev;$/;"	m	struct:rx	typeref:struct:rx::	file:
previewNode	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
promiscuous	e100.c	/^		promiscuous        = (1 << 1),$/;"	e	enum:nic::__anon13	file:
promiscuous	pcie_net_dri.h	/^		promiscuous        = (1 << 1),$/;"	e	enum:pcie_ether_data_t::__anon6
promptToDelBuffer	vimconfig/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
rbd	e100.c	/^	__le32 rbd;$/;"	m	struct:rfd	file:
rbd	pcie_net_dri.h	/^	__le32 rbd;$/;"	m	struct:rfd
rcv_tco_frames	e100.c	/^	__le16 xmt_tco_frames, rcv_tco_frames;$/;"	m	struct:stats	file:
read_dma_buf	test_dma/dma_test.c	/^int read_dma_buf( int size){$/;"	f
read_dma_buf_char	test_dma/dma_test.c	/^static unsigned char *read_dma_buf_char;$/;"	v	file:
read_dma_buf_word	test_dma/dma_test.c	/^static unsigned int  *read_dma_buf_word;$/;"	v	file:
read_reg_timer	test_dma/dma_test.c	/^struct timer_list read_reg_timer;$/;"	v	typeref:struct:timer_list
read_reg_timer_func	test_dma/dma_test.c	/^void read_reg_timer_func(unsigned long data)$/;"	f
receive_dma_ops	pcie_net_dri.c	/^int receive_dma_ops(struct net_device *netdev)$/;"	f
refreshCurrent	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
renderBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
restoreScreenState	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restoreTempOptions	vimconfig/.vim/autoload/acp.vim	/^function s:restoreTempOptions(group)$/;"	f
result	e100.c	/^		u32 result;$/;"	m	struct:mem::__anon12	file:
result	pcie_net_dri.h	/^		u32 result;$/;"	m	struct:mem::__anon7
revealBookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
revision	m6x_drv/src/pcie.c	/^	unsigned char revision;$/;"	m	struct:__anon15	file:
revision	pcie_net_dri.h	/^	unsigned char revision ;$/;"	m	struct:pcie_ether_data_t
revision	test_dma/dma_test.c	/^	unsigned char revision;$/;"	m	struct:__anon3	file:
rfd	e100.c	/^struct rfd {$/;"	s	file:
rfd	pcie_net_dri.h	/^struct rfd {$/;"	s
rfds	e100.c	/^	struct param_range rfds;$/;"	m	struct:params	typeref:struct:params::param_range	file:
rfds	pcie_net_dri.h	/^	struct param_range rfds;$/;"	m	struct:params	typeref:struct:params::param_range
rsvd1	m6x_drv/src/pps.c	/^	unsigned char  rsvd1[11];$/;"	m	struct:__anon19	file:
rsvd1	m6x_drv/src/pps.c	/^	unsigned int   rsvd1;$/;"	m	struct:__anon18	file:
rsvd2	m6x_drv/src/pps.c	/^	unsigned char  rsvd2[3];$/;"	m	struct:__anon18	file:
ru_running	e100.c	/^	enum ru_state ru_running;$/;"	m	struct:nic	typeref:enum:nic::ru_state	file:
ru_running	pcie_net_dri.h	/^	enum ru_state ru_running;$/;"	m	struct:pcie_ether_data_t	typeref:enum:pcie_ether_data_t::ru_state
ru_state	e100.c	/^enum ru_state  {$/;"	g	file:
ru_state	pcie_net_dri.h	/^enum ru_state  {$/;"	g
ruc_load_base	e100.c	/^	ruc_load_base  = 0x06,$/;"	e	enum:scb_cmd_lo	file:
ruc_load_base	pcie_net_dri.h	/^	ruc_load_base  = 0x06,$/;"	e	enum:scb_cmd_lo
ruc_start	e100.c	/^	ruc_start      = 0x01,$/;"	e	enum:scb_cmd_lo	file:
ruc_start	pcie_net_dri.h	/^	ruc_start      = 0x01,$/;"	e	enum:scb_cmd_lo
run_ioctl	m6x_drv/src/app.c	/^int run_ioctl(int fd, int cmd, unsigned char *buf)$/;"	f
rus_mask	e100.c	/^	rus_mask         = 0x3C,$/;"	e	enum:scb_status	file:
rus_no_res	e100.c	/^	rus_no_res       = 0x08,$/;"	e	enum:scb_status	file:
rus_ready	e100.c	/^	rus_ready        = 0x10,$/;"	e	enum:scb_status	file:
rx	e100.c	/^struct rx {$/;"	s	file:
rx_alignment_errors	e100.c	/^	__le32 rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:stats	file:
rx_cdt_errors	e100.c	/^		rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:stats	file:
rx_crc_errors	e100.c	/^	__le32 rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:stats	file:
rx_dm	pcie_net_dri.h	/^	dm_t rx_dm ;$/;"	m	struct:pcie_ether_data_t
rx_dma_count	e100.c	/^	u32 rx_dma_count;$/;"	m	struct:csr	file:
rx_fc_pause	e100.c	/^	u32 rx_fc_pause;$/;"	m	struct:nic	file:
rx_fc_pause	pcie_net_dri.h	/^	u32 rx_fc_pause;$/;"	m	struct:pcie_ether_data_t
rx_fc_unsupported	e100.c	/^	u32 rx_fc_unsupported;$/;"	m	struct:nic	file:
rx_fc_unsupported	pcie_net_dri.h	/^	u32 rx_fc_unsupported;$/;"	m	struct:pcie_ether_data_t
rx_fifo	m6x_drv/src/ioctl.c	/^static struct kfifo rx_fifo;$/;"	v	typeref:struct:kfifo	file:
rx_good_frames	e100.c	/^	__le32 rx_good_frames, rx_crc_errors, rx_alignment_errors,$/;"	m	struct:stats	file:
rx_over_length_errors	e100.c	/^	u32 rx_over_length_errors;$/;"	m	struct:nic	file:
rx_over_length_errors	pcie_net_dri.h	/^	u32 rx_over_length_errors;$/;"	m	struct:pcie_ether_data_t
rx_overrun_errors	e100.c	/^		rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:stats	file:
rx_resource_errors	e100.c	/^		rx_resource_errors, rx_overrun_errors, rx_cdt_errors,$/;"	m	struct:stats	file:
rx_save_bad_frames	e100.c	/^	   rx_save_overruns : 1), rx_save_bad_frames : 1);$/;"	m	struct:config	file:
rx_save_overruns	e100.c	/^	   rx_save_overruns : 1), rx_save_bad_frames : 1);$/;"	m	struct:config	file:
rx_short_frame_errors	e100.c	/^		rx_short_frame_errors;$/;"	m	struct:stats	file:
rx_short_frame_errors	e100.c	/^	u32 rx_short_frame_errors;$/;"	m	struct:nic	file:
rx_short_frame_errors	pcie_net_dri.h	/^	u32 rx_short_frame_errors;$/;"	m	struct:pcie_ether_data_t
rx_tco_frames	e100.c	/^	u32 rx_tco_frames;$/;"	m	struct:nic	file:
rx_tco_frames	pcie_net_dri.h	/^	u32 rx_tco_frames;$/;"	m	struct:pcie_ether_data_t
rx_test	m6x_drv/src/eth.c	/^int rx_test(int addr, int size)$/;"	f
rx_test	test_dma/dma_test.c	/^int rx_test(int addr, int size)\/\/0,4$/;"	f
rx_to_clean	e100.c	/^	struct rx *rx_to_clean;$/;"	m	struct:nic	typeref:struct:nic::rx	file:
rx_to_clean	pcie_net_dri.h	/^	struct rx *rx_to_clean;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::rx
rx_to_use	e100.c	/^	struct rx *rx_to_use;$/;"	m	struct:nic	typeref:struct:nic::rx	file:
rx_to_use	pcie_net_dri.h	/^	struct rx *rx_to_use;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::rx
s:Bookmark	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:C	vimconfig/.vim/autoload/genutils.vim	/^let s:C = 100$/;"	v
s:CACHE_DEBUG_TRACE	vimconfig/.vim/autoload/omni/common/debug.vim	/^let s:CACHE_DEBUG_TRACE = []$/;"	v
s:CACHE_OVERLOADED_FUNCTIONS	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:CACHE_OVERLOADED_FUNCTIONS = {}$/;"	v
s:CACHE_TAG_ENV	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_ENV = ''$/;"	v
s:CACHE_TAG_FILES	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_FILES = {}$/;"	v
s:CACHE_TAG_POPUP_ITEMS	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:CACHE_TAG_POPUP_ITEMS = {}$/;"	v
s:D	vimconfig/.vim/autoload/genutils.vim	/^let s:D = 500$/;"	v
s:GROUP0	vimconfig/.vim/autoload/acp.vim	/^let s:GROUP0 = 0$/;"	v
s:GROUP1	vimconfig/.vim/autoload/acp.vim	/^let s:GROUP1 = 1$/;"	v
s:HLUDFlag	vimconfig/.vim/plugin/hlud.vim	/^let s:HLUDFlag = ['d', 'e', 'f', 'g', 'p', 's', 't', 'u']$/;"	v
s:HLUDType	vimconfig/.vim/plugin/hlud.vim	/^let s:HLUDType = []$/;"	v
s:HLUD_TagsFile	vimconfig/.vim/plugin/hlud.vim	/^let s:HLUD_TagsFile = 'tags.ut'$/;"	v
s:I	vimconfig/.vim/autoload/genutils.vim	/^let s:I = 1$/;"	v
s:KeyMap	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:L	vimconfig/.vim/autoload/genutils.vim	/^let s:L = 50$/;"	v
s:M	vimconfig/.vim/autoload/genutils.vim	/^let s:M = 1000$/;"	v
s:MRU_Exclude_List	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:MRU_Exclude_List = ["[BufExplorer]","__MRU_Files__"]$/;"	v
s:MenuController	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	vimconfig/.vim/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:OmniCpp_ShowAccess	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowAccess = g:OmniCpp_ShowAccess$/;"	v
s:OmniCpp_ShowPrototypeInAbbr	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowPrototypeInAbbr = g:OmniCpp_ShowPrototypeInAbbr$/;"	v
s:OmniCpp_ShowScopeInAbbr	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:OmniCpp_ShowScopeInAbbr = g:OmniCpp_ShowScopeInAbbr$/;"	v
s:Path	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	vimconfig/.vim/plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:UNPROTECTED_CHAR_PRFX	vimconfig/.vim/autoload/genutils.vim	/^let s:UNPROTECTED_CHAR_PRFX = '\\%(\\%([^\\\\]\\|^\\)\\\\\\%(\\\\\\\\\\)*\\)\\@<!' " Doesn't eat slashes.$/;"	v
s:V	vimconfig/.vim/autoload/genutils.vim	/^let s:V = 5$/;"	v
s:X	vimconfig/.vim/autoload/genutils.vim	/^let s:X = 10$/;"	v
s:autoinstall	vimconfig/.vim/autoload/getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	vimconfig/.vim/autoload/getscript.vim	/^let s:autoinstall= ""$/;"	v
s:bMayComplete	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:bMayComplete = 0$/;"	v
s:baseBufNr	vimconfig/.vim/plugin/lookupfile.vim	/^let s:baseBufNr = 0$/;"	v
s:behavsCurrent	vimconfig/.vim/autoload/acp.vim	/^let s:behavsCurrent = []$/;"	v
s:bufList	vimconfig/.vim/plugin/lookupfile.vim	/^let s:bufList = [1]$/;"	v
s:count	vimconfig/.vim/plugin/echofunc.vim	/^let s:count=1$/;"	v
s:cpo_save	vimconfig/.vim/plugin/mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vimconfig/.vim/plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cppKeyword	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:cppKeyword = ['asm', 'auto', 'bool', 'break', 'case', 'catch', 'char', 'class', 'const', 'const_cast', 'continue', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline', 'int', 'long', 'mutable', 'namespace', 'new', 'operator', 'private', 'protected', 'public', 'register', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'static', 'static_cast', 'struct', 'switch', 'template', 'this', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq']$/;"	v
s:cppOperatorPunctuator	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:cppOperatorPunctuator = ['->*', '->', '--', '-=', '-', '!=', '!', '##', '#', '%:%:', '%=', '%>', '%:', '%', '&&', '&=', '&', '(', ')', '*=', '*', ',', '...', '.*', '.', '\/=', '\/', '::', ':>', ':', ';', '?', '[', ']', '^=', '^', '{', '||', '|=', '|', '}', '~', '++', '+=', '+', '<<=', '<%', '<:', '<<', '<=', '<', '==', '=', '>>=', '>>', '>=', '>']$/;"	v
s:defFCShellInstalled	vimconfig/.vim/autoload/genutils.vim	/^let s:defFCShellInstalled = 0$/;"	v
s:delimiterMap	vimconfig/.vim/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	vimconfig/.vim/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	vimconfig/.vim/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:dotvim	vimconfig/.vim/autoload/getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	vimconfig/.vim/autoload/getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:esc_filename_chars	vimconfig/.vim/plugin/mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:escape_chars	vimconfig/.vim/plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	vimconfig/.vim/plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:fcShellPreFuncs	vimconfig/.vim/autoload/genutils.vim	/^  let s:fcShellPreFuncs = {}$/;"	v
s:fileWild	vimconfig/.vim/plugin/lookupfile.vim	/^let s:fileWild = {}$/;"	v
s:gdb_k	vimconfig/.vim/macros/gdb_mappings.vim	/^let s:gdb_k = 1$/;"	v
s:hasPreviewWindow	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:hasPreviewWindow = match(&completeopt, 'preview')>=0$/;"	v
s:hasPreviewWindowOld	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:hasPreviewWindowOld = s:hasPreviewWindow$/;"	v
s:iBehavs	vimconfig/.vim/autoload/acp.vim	/^let s:iBehavs = 0$/;"	v
s:keepcpo	vimconfig/.vim/autoload/ZoomWin.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	vimconfig/.vim/autoload/getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vimconfig/.vim/plugin/ZoomWinPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	vimconfig/.vim/plugin/getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:lenSpaceStr	vimconfig/.vim/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:lockCount	vimconfig/.vim/autoload/acp.vim	/^let s:lockCount = 0$/;"	v
s:makeArgumentList	vimconfig/.vim/autoload/genutils.vim	/^let s:makeArgumentList = ''$/;"	v
s:makeArgumentString	vimconfig/.vim/autoload/genutils.vim	/^let s:makeArgumentString = ''$/;"	v
s:menu_char_prefix	vimconfig/.vim/plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modes	vimconfig/.vim/plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	vimconfig/.vim/plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:mru_list_locked	vimconfig/.vim/plugin/mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:myBufNum	vimconfig/.vim/autoload/lookupfile.vim	/^  let s:myBufNum = -1$/;"	v
s:mySNR	vimconfig/.vim/autoload/genutils.vim	/^let s:mySNR = ''$/;"	v
s:mySNR	vimconfig/.vim/plugin/lookupfile.vim	/^let s:mySNR = ''$/;"	v
s:name	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:name = '[BufExplorer]'$/;"	v
s:next_buffer_number	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:notifyWindow	vimconfig/.vim/autoload/genutils.vim	/^let s:notifyWindow = {}$/;"	v
s:old_cpo	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:originBuffer	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:originBuffer = 0$/;"	v
s:popupIsHidden	vimconfig/.vim/autoload/lookupfile.vim	/^  let s:popupIsHidden = 0$/;"	v
s:popupItemResultList	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:popupItemResultList = []$/;"	v
s:reCComment	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:reCComment = '\\\/\\*\\|\\*\\\/'$/;"	v
s:reComment	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:reComment = s:reCComment.'\\|'.s:reCppComment$/;"	v
s:reCppComment	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:reCppComment = '\\\/\\\/'$/;"	v
s:reCppKeyword	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:reCppKeyword = '\\C\\<'.join(s:cppKeyword, '\\>\\|\\<').'\\>'$/;"	v
s:reCppOperatorOrPunctuator	vimconfig/.vim/autoload/omni/cpp/tokenizer.vim	/^let s:reCppOperatorOrPunctuator = escape(join(s:cppOperatorPunctuator, '\\|'), '*.\/^~[]')$/;"	v
s:reIncludeFilePart	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^let s:reIncludeFilePart = '\\(<\\|"\\)\\(\\f\\|\\s\\)\\+\\(>\\|"\\)'$/;"	v
s:rePreprocIncludeFile	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^let s:rePreprocIncludeFile = s:rePreprocIncludePart . s:reIncludeFilePart$/;"	v
s:rePreprocIncludePart	vimconfig/.vim/autoload/omni/cpp/includes.vim	/^let s:rePreprocIncludePart = '\\C#\\s*include\\s*'$/;"	v
s:refreshBufferList	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:refreshBufferList = 1$/;"	v
s:res	vimconfig/.vim/plugin/echofunc.vim	/^let s:res=[]$/;"	v
s:running	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:running = 0$/;"	v
s:running_windows	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	vimconfig/.vim/autoload/genutils.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vimconfig/.vim/autoload/lookupfile.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vimconfig/.vim/plugin/hlud.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vimconfig/.vim/plugin/lookupfile.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vimconfig/.vim/plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:selection	vimconfig/.vim/autoload/genutils.vim	/^let s:selection = -1$/;"	v
s:snipItems	vimconfig/.vim/autoload/acp.vim	/^let s:snipItems = {}$/;"	v
s:snippets	vimconfig/.vim/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:sort_by	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:sort_by = ["number", "name", "fullpath", "mru", "extension"]$/;"	v
s:spaceStr	vimconfig/.vim/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spacer	vimconfig/.vim/autoload/genutils.vim	/^let s:spacer= "                                                               ".$/;"	v
s:splitMode	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:splitMode = ""$/;"	v
s:szCurrentWorkingDir	vimconfig/.vim/autoload/omni/cpp/complete.vim	/^let s:szCurrentWorkingDir = getcwd()$/;"	v
s:tabHelp	vimconfig/.vim/plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:tempOptionSet	vimconfig/.vim/autoload/acp.vim	/^let s:tempOptionSet = [{}, {}]$/;"	v
s:tlist_app_name	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	vimconfig/.vim/plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	vimconfig/.vim/plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	vimconfig/.vim/plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	vimconfig/.vim/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	vimconfig/.vim/plugin/bufexplorer.vim	/^let s:types = {"fullname": ':p', "path": ':p:h', "relativename": ':~:.', "relativepath": ':~:.:h', "shortname": ':t'}$/;"	v
s:types	vimconfig/.vim/plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	vimconfig/.vim/plugin/supertab.vim	/^  let s:types =$/;"	v
s:windowName	vimconfig/.vim/autoload/lookupfile.vim	/^  let s:windowName = '[Lookup File]'$/;"	v
save	m6x_drv/src/pcie.c	/^	struct pci_saved_state *save;$/;"	m	struct:__anon15	typeref:struct:__anon15::pci_saved_state	file:
save	pcie_net_dri.h	/^	struct pci_saved_state *save ;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::pci_saved_state
save	test_dma/dma_test.c	/^	struct pci_saved_state *save;$/;"	m	struct:__anon3	typeref:struct:__anon3::pci_saved_state	file:
saveScreenState	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
scb	e100.c	/^	} scb;$/;"	m	struct:csr	typeref:struct:csr::__anon8	file:
scb_cmd_hi	e100.c	/^enum scb_cmd_hi {$/;"	g	file:
scb_cmd_lo	e100.c	/^enum scb_cmd_lo {$/;"	g	file:
scb_cmd_lo	pcie_net_dri.h	/^enum scb_cmd_lo {$/;"	g
scb_stat_ack	e100.c	/^enum scb_stat_ack {$/;"	g	file:
scb_status	e100.c	/^enum scb_status {$/;"	g	file:
selective_reset	e100.c	/^	selective_reset = 0x0002,$/;"	e	enum:port	file:
selftest	e100.c	/^	selftest        = 0x0001,$/;"	e	enum:port	file:
selftest	e100.c	/^	} selftest;$/;"	m	struct:mem	typeref:struct:mem::__anon12	file:
selftest	pcie_net_dri.h	/^	} selftest;$/;"	m	struct:mem	typeref:struct:mem::__anon7
send_dma_phy_addr	pcie_net_dri.h	/^	dma_addr_t send_dma_phy_addr ;$/;"	m	struct:pcie_ether_data_t
setCompletefunc	vimconfig/.vim/autoload/acp.vim	/^function s:setCompletefunc()$/;"	f
setTempOption	vimconfig/.vim/autoload/acp.vim	/^function s:setTempOption(group, name, value)$/;"	f
setupStatusline	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
showMenu	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
sign_buffer	m6x_drv/src/app.c	/^unsigned char sign_buffer[4096];$/;"	v
signature	e100.c	/^		u32 signature;$/;"	m	struct:mem::__anon12	file:
signature	pcie_net_dri.h	/^		u32 signature;$/;"	m	struct:mem::__anon7
size	e100.c	/^				__le16 size;$/;"	m	struct:cb::__anon9::__anon10::__anon11	file:
size	e100.c	/^	__le16 size;$/;"	m	struct:rfd	file:
size	m6x_drv/src/m6x_api.h	/^	int size;$/;"	m	struct:__anon16
size	pcie_net_dri.h	/^	__le16 size;$/;"	m	struct:rfd
size	pcie_net_dri.h	/^	int size;$/;"	m	struct:__anon4
size	test_dma/m6x_api.h	/^	int size;$/;"	m	struct:__anon1
skb	e100.c	/^	struct sk_buff *skb;$/;"	m	struct:cb	typeref:struct:cb::sk_buff	file:
skb	e100.c	/^	struct sk_buff *skb;$/;"	m	struct:rx	typeref:struct:rx::sk_buff	file:
skb	pcie_net_dri.h	/^	struct sk_buff *skb ;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::sk_buff
snipMate#expandSnip	vimconfig/.vim/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	vimconfig/.vim/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	vimconfig/.vim/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
software_reset	e100.c	/^	software_reset  = 0x0000,$/;"	e	enum:port	file:
source	m6x_drv/src/pps.c	/^	unsigned short source;$/;"	m	struct:__anon19	file:
stat_ack	e100.c	/^		u8 stat_ack;$/;"	m	struct:csr::__anon8	file:
stat_ack_cu_cmd_done	e100.c	/^	stat_ack_cu_cmd_done = 0x80,$/;"	e	enum:scb_stat_ack	file:
stat_ack_cu_idle	e100.c	/^	stat_ack_cu_idle     = 0x20,$/;"	e	enum:scb_stat_ack	file:
stat_ack_frame_rx	e100.c	/^	stat_ack_frame_rx    = 0x40,$/;"	e	enum:scb_stat_ack	file:
stat_ack_not_ours	e100.c	/^	stat_ack_not_ours    = 0x00,$/;"	e	enum:scb_stat_ack	file:
stat_ack_not_present	e100.c	/^	stat_ack_not_present = 0xFF,$/;"	e	enum:scb_stat_ack	file:
stat_ack_rnr	e100.c	/^	stat_ack_rnr         = 0x10,$/;"	e	enum:scb_stat_ack	file:
stat_ack_rx	e100.c	/^	stat_ack_rx = (stat_ack_sw_gen | stat_ack_rnr | stat_ack_frame_rx),$/;"	e	enum:scb_stat_ack	file:
stat_ack_sw_gen	e100.c	/^	stat_ack_sw_gen      = 0x04,$/;"	e	enum:scb_stat_ack	file:
stat_ack_tx	e100.c	/^	stat_ack_tx = (stat_ack_cu_idle | stat_ack_cu_cmd_done),$/;"	e	enum:scb_stat_ack	file:
state	m6x_drv/src/pps.c	/^	unsigned char  state;$/;"	m	struct:__anon18	file:
stats	e100.c	/^	struct stats stats;$/;"	m	struct:mem	typeref:struct:mem::stats	file:
stats	e100.c	/^struct stats {$/;"	s	file:
stats	pcie_net_dri.h	/^	struct stats {$/;"	s	struct:pcie_ether_data_t
stats	pcie_net_dri.h	/^	} stats ;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::stats
status	e100.c	/^		u8 status;$/;"	m	struct:csr::__anon8	file:
status	e100.c	/^	__le16 status;$/;"	m	struct:cb	file:
status	e100.c	/^	__le16 status;$/;"	m	struct:rfd	file:
status	pcie_net_dri.h	/^	__le16 status;$/;"	m	struct:rfd
stripMarkupFromLine	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
sub_system_id	m6x_drv/src/pcie.c	/^	unsigned short sub_system_id;$/;"	m	struct:__anon15	file:
sub_system_id	pcie_net_dri.h	/^	unsigned char sub_system_id ;$/;"	m	struct:pcie_ether_data_t
sub_system_id	test_dma/dma_test.c	/^	unsigned short sub_system_id;$/;"	m	struct:__anon3	file:
sub_vendor_id	m6x_drv/src/pcie.c	/^	unsigned short sub_vendor_id;$/;"	m	struct:__anon15	file:
sub_vendor_id	pcie_net_dri.h	/^	unsigned char sub_vendor_id ;$/;"	m	struct:pcie_ether_data_t
sub_vendor_id	test_dma/dma_test.c	/^	unsigned short sub_vendor_id;$/;"	m	struct:__anon3	file:
sync	m6x_drv/src/pps.c	/^	unsigned short sync;$/;"	m	struct:__anon17	file:
t	m6x_drv/src/app.c	/^	unsigned int t;$/;"	m	struct:__anon20	file:
t	m6x_drv/src/ioctl.c	/^	unsigned int t;$/;"	m	struct:__anon22	file:
tabpagevar	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tacc	m6x_drv/src/pps.c	/^	unsigned char  tacc;$/;"	m	struct:__anon18	file:
tbd	e100.c	/^			} tbd;$/;"	m	struct:cb::__anon9::__anon10	typeref:struct:cb::__anon9::__anon10::__anon11	file:
tbd_array	e100.c	/^			u32 tbd_array;$/;"	m	struct:cb::__anon9::__anon10	file:
tbd_count	e100.c	/^			u8 tbd_count;$/;"	m	struct:cb::__anon9::__anon10	file:
tcb	e100.c	/^		} tcb;$/;"	m	union:cb::__anon9	typeref:struct:cb::__anon9::__anon10	file:
tcb_byte_count	e100.c	/^			u16 tcb_byte_count;$/;"	m	struct:cb::__anon9::__anon10	file:
term_write_cache_line	e100.c	/^	   term_write_cache_line:1), pad3:4);$/;"	m	struct:config	file:
testcdev	m6x_drv/src/ioctl.c	/^	struct cdev testcdev;$/;"	m	struct:__anon21	typeref:struct:__anon21::cdev	file:
threshold	e100.c	/^			u8 threshold;$/;"	m	struct:cb::__anon9::__anon10	file:
time_d_ms	m6x_drv/src/app.c	/^static long time_d_ms(struct timeval *start, struct timeval *end)$/;"	f	file:
tlv_t	m6x_drv/src/app.c	/^} tlv_t;$/;"	t	typeref:struct:__anon20	file:
tlv_t	m6x_drv/src/ioctl.c	/^} tlv_t;$/;"	t	typeref:struct:__anon22	file:
tm_to_tvsec	m6x_drv/src/pps.c	/^int tm_to_tvsec(struct rtc_time *tm, unsigned long *tvsec)$/;"	f
tod_hdr_t	m6x_drv/src/pps.c	/^}__attribute__ ((packed)) tod_hdr_t;$/;"	t	typeref:struct:__anon17	file:
tod_time_info_t	m6x_drv/src/pps.c	/^}__attribute__ ((packed)) tod_time_info_t;$/;"	t	typeref:struct:__anon18	file:
tod_time_state_t	m6x_drv/src/pps.c	/^}__attribute__ ((packed)) tod_time_state_t;$/;"	t	typeref:struct:__anon19	file:
toggle	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toupper	m6x_drv/src/ioctl.c	20;"	d	file:
tow	m6x_drv/src/pps.c	/^	unsigned int   tow;$/;"	m	struct:__anon18	file:
treeExistsForBuf	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
tvsec_to_tm	m6x_drv/src/pps.c	/^int tvsec_to_tm(unsigned long tvsec, struct rtc_time *tm)$/;"	f
tx_collisions	e100.c	/^	u32 tx_collisions;$/;"	m	struct:nic	file:
tx_collisions	pcie_net_dri.h	/^	u32 tx_collisions;$/;"	m	struct:pcie_ether_data_t
tx_command	e100.c	/^	__le16 tx_command;$/;"	m	struct:nic	file:
tx_command	pcie_net_dri.h	/^	__le16 tx_command;$/;"	m	struct:pcie_ether_data_t
tx_deferred	e100.c	/^		tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:stats	file:
tx_deferred	e100.c	/^	u32 tx_deferred;$/;"	m	struct:nic	file:
tx_deferred	pcie_net_dri.h	/^	u32 tx_deferred;$/;"	m	struct:pcie_ether_data_t
tx_dynamic_tbd	e100.c	/^	   tx_dynamic_tbd:1);$/;"	m	struct:config	file:
tx_errors	pcie_net_dri.h	/^		int tx_errors ;$/;"	m	struct:pcie_ether_data_t::stats
tx_fc_pause	e100.c	/^	u32 tx_fc_pause;$/;"	m	struct:nic	file:
tx_fc_pause	pcie_net_dri.h	/^	u32 tx_fc_pause;$/;"	m	struct:pcie_ether_data_t
tx_frames	e100.c	/^	u32 tx_frames;$/;"	m	struct:nic	file:
tx_frames	pcie_net_dri.h	/^	u32 tx_frames;$/;"	m	struct:pcie_ether_data_t
tx_good_frames	e100.c	/^	__le32 tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:stats	file:
tx_late_collisions	e100.c	/^	__le32 tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:stats	file:
tx_lost_crs	e100.c	/^		tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:stats	file:
tx_max_collisions	e100.c	/^	__le32 tx_good_frames, tx_max_collisions, tx_late_collisions,$/;"	m	struct:stats	file:
tx_multiple_collisions	e100.c	/^		tx_multiple_collisions, tx_total_collisions;$/;"	m	struct:stats	file:
tx_multiple_collisions	e100.c	/^	u32 tx_multiple_collisions;$/;"	m	struct:nic	file:
tx_multiple_collisions	pcie_net_dri.h	/^	u32 tx_multiple_collisions;$/;"	m	struct:pcie_ether_data_t
tx_single_collisions	e100.c	/^		tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:stats	file:
tx_single_collisions	e100.c	/^	u32 tx_single_collisions;$/;"	m	struct:nic	file:
tx_single_collisions	pcie_net_dri.h	/^	u32 tx_single_collisions;$/;"	m	struct:pcie_ether_data_t
tx_tco_frames	e100.c	/^	u32 tx_tco_frames;$/;"	m	struct:nic	file:
tx_tco_frames	pcie_net_dri.h	/^	u32 tx_tco_frames;$/;"	m	struct:pcie_ether_data_t
tx_test	m6x_drv/src/eth.c	/^int tx_test(int value)$/;"	f
tx_test	test_dma/dma_test.c	/^int tx_test(int value)$/;"	f
tx_threshold	e100.c	/^	u8 tx_threshold;$/;"	m	struct:nic	file:
tx_threshold	pcie_net_dri.h	/^	u8 tx_threshold;$/;"	m	struct:pcie_ether_data_t
tx_timeout_task	e100.c	/^	struct work_struct tx_timeout_task;$/;"	m	struct:nic	typeref:struct:nic::work_struct	file:
tx_timeout_task	pcie_net_dri.h	/^	struct work_struct tx_timeout_task;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::work_struct
tx_total_collisions	e100.c	/^		tx_multiple_collisions, tx_total_collisions;$/;"	m	struct:stats	file:
tx_two_frames_in_fifo	e100.c	/^	   pad7:2), rx_extended_rfd:1), tx_two_frames_in_fifo:1),$/;"	m	struct:config	file:
tx_underruns	e100.c	/^		tx_underruns, tx_lost_crs, tx_deferred, tx_single_collisions,$/;"	m	struct:stats	file:
type	m6x_drv/src/pps.c	/^	unsigned char  type;$/;"	m	struct:__anon19	file:
u	e100.c	/^	} u;$/;"	m	struct:cb	typeref:union:cb::__anon9	file:
ucode	e100.c	/^		__le32 ucode[UCODE_SIZE];$/;"	m	union:cb::__anon9	file:
unique	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unmapForMappingDriven	vimconfig/.vim/autoload/acp.vim	/^function s:unmapForMappingDriven()$/;"	f
upDir	vimconfig/.vim/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
use_io	e100.c	/^static int use_io = 0;$/;"	v	file:
v	m6x_drv/src/app.c	/^	unsigned char v[0];$/;"	m	struct:__anon20	file:
v	m6x_drv/src/ioctl.c	/^	unsigned char v[0];$/;"	m	struct:__anon22	file:
vendor_id	m6x_drv/src/pcie.c	/^	unsigned short vendor_id;$/;"	m	struct:__anon15	file:
vendor_id	pcie_net_dri.h	/^	unsigned char vendor_id ;$/;"	m	struct:pcie_ether_data_t
vendor_id	test_dma/dma_test.c	/^	unsigned short vendor_id;$/;"	m	struct:__anon3	file:
vir	m6x_drv/src/m6x_api.h	/^	unsigned long vir;$/;"	m	struct:__anon16
vir	pcie_net_dri.h	/^	unsigned long vir;$/;"	m	struct:__anon4
vir	test_dma/m6x_api.h	/^	unsigned long vir;$/;"	m	struct:__anon1
vmem	m6x_drv/src/pcie.c	/^	unsigned char *vmem;$/;"	m	struct:__anon14	file:
vmem	pcie_net_dri.h	/^	unsigned char *vmem ;$/;"	m	struct:__anon5
vmem	test_dma/dma_test.c	/^	unsigned char *vmem;$/;"	m	struct:__anon2	file:
watchdog	e100.c	/^	struct timer_list watchdog;$/;"	m	struct:nic	typeref:struct:nic::timer_list	file:
watchdog	pcie_net_dri.h	/^	struct timer_list watchdog;$/;"	m	struct:pcie_ether_data_t	typeref:struct:pcie_ether_data_t::timer_list
week	m6x_drv/src/pps.c	/^	unsigned short week;$/;"	m	struct:__anon18	file:
wol_magic	e100.c	/^		wol_magic          = (1 << 3),$/;"	e	enum:nic::__anon13	file:
wol_magic	pcie_net_dri.h	/^		wol_magic          = (1 << 3),$/;"	e	enum:pcie_ether_data_t::__anon6
write_dma_buf_char	test_dma/dma_test.c	/^static unsigned char *write_dma_buf_char;$/;"	v	file:
write_dma_buf_word	test_dma/dma_test.c	/^static unsigned int  *write_dma_buf_word;$/;"	v	file:
xmt_tco_frames	e100.c	/^	__le16 xmt_tco_frames, rcv_tco_frames;$/;"	m	struct:stats	file:
